
led_button_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002674  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002920  08002920  00003920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002930  08002930  00003930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002934  08002934  00003934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002938  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  24000010  08002948  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000084  08002948  00004084  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d08e  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b5a  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c58  00000000  00000000  00012c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000097e  00000000  00000000  00013880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f4f0  00000000  00000000  000141fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000deeb  00000000  00000000  000436ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00137e3a  00000000  00000000  000515d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00189413  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003334  00000000  00000000  00189458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  0018c78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08002908 	.word	0x08002908

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08002908 	.word	0x08002908

080002ec <turn_on_led1>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void turn_on_led1(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	LED1_H();
 80002f0:	2201      	movs	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4802      	ldr	r0, [pc, #8]	@ (8000300 <turn_on_led1+0x14>)
 80002f6:	f000 ff71 	bl	80011dc <HAL_GPIO_WritePin>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	58020400 	.word	0x58020400

08000304 <turn_on_led2>:
void turn_on_led2(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	LED2_H();
 8000308:	2201      	movs	r2, #1
 800030a:	2102      	movs	r1, #2
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <turn_on_led2+0x14>)
 800030e:	f000 ff65 	bl	80011dc <HAL_GPIO_WritePin>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	58021000 	.word	0x58021000

0800031c <turn_on_led3>:
void turn_on_led3(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	LED3_H();
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000326:	4802      	ldr	r0, [pc, #8]	@ (8000330 <turn_on_led3+0x14>)
 8000328:	f000 ff58 	bl	80011dc <HAL_GPIO_WritePin>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58020400 	.word	0x58020400

08000334 <turn_off_led1>:
void turn_off_led1(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	LED1_L();
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	4802      	ldr	r0, [pc, #8]	@ (8000348 <turn_off_led1+0x14>)
 800033e:	f000 ff4d 	bl	80011dc <HAL_GPIO_WritePin>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	58020400 	.word	0x58020400

0800034c <turn_off_led2>:
void turn_off_led2(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LED2_L();
 8000350:	2200      	movs	r2, #0
 8000352:	2102      	movs	r1, #2
 8000354:	4802      	ldr	r0, [pc, #8]	@ (8000360 <turn_off_led2+0x14>)
 8000356:	f000 ff41 	bl	80011dc <HAL_GPIO_WritePin>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	58021000 	.word	0x58021000

08000364 <turn_off_led3>:
void turn_off_led3(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	LED3_L();
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800036e:	4802      	ldr	r0, [pc, #8]	@ (8000378 <turn_off_led3+0x14>)
 8000370:	f000 ff34 	bl	80011dc <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58020400 	.word	0x58020400

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000380:	f000 f9d8 	bl	8000734 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 fb60 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f806 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f000 f8b2 	bl	80004f4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000390:	f000 f878 	bl	8000484 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <main+0x18>

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b09c      	sub	sp, #112	@ 0x70
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a2:	224c      	movs	r2, #76	@ 0x4c
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fa82 	bl	80028b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2220      	movs	r2, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fa7c 	bl	80028b0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xE003FFFF;
 80003b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000478 <SystemClock_Config+0xe0>)
 80003ba:	4a30      	ldr	r2, [pc, #192]	@ (800047c <SystemClock_Config+0xe4>)
 80003bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003c0:	2004      	movs	r0, #4
 80003c2:	f000 ff3f 	bl	8001244 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003c6:	2300      	movs	r3, #0
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000480 <SystemClock_Config+0xe8>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <SystemClock_Config+0xe8>)
 80003d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000480 <SystemClock_Config+0xe8>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003e2:	bf00      	nop
 80003e4:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <SystemClock_Config+0xe8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003f0:	d1f8      	bne.n	80003e4 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f2:	2302      	movs	r3, #2
 80003f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003fa:	2340      	movs	r3, #64	@ 0x40
 80003fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	2300      	movs	r3, #0
 8000404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000406:	2304      	movs	r3, #4
 8000408:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800040a:	2323      	movs	r3, #35	@ 0x23
 800040c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800040e:	2302      	movs	r3, #2
 8000410:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000412:	2304      	movs	r3, #4
 8000414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000416:	2302      	movs	r3, #2
 8000418:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800041a:	230c      	movs	r3, #12
 800041c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800041e:	2300      	movs	r3, #0
 8000420:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800042a:	4618      	mov	r0, r3
 800042c:	f000 ff64 	bl	80012f8 <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000436:	f000 f9a9 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	233f      	movs	r3, #63	@ 0x3f
 800043c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2303      	movs	r3, #3
 8000440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800044a:	2340      	movs	r3, #64	@ 0x40
 800044c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800044e:	2340      	movs	r3, #64	@ 0x40
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000456:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000458:	2340      	movs	r3, #64	@ 0x40
 800045a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2106      	movs	r1, #6
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fb7b 	bl	8001b5c <HAL_RCC_ClockConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800046c:	f000 f98e 	bl	800078c <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3770      	adds	r7, #112	@ 0x70
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	58024400 	.word	0x58024400
 800047c:	e003ffff 	.word	0xe003ffff
 8000480:	58024800 	.word	0x58024800

08000484 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000494:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <MX_TIM6_Init+0x68>)
 8000496:	4a16      	ldr	r2, [pc, #88]	@ (80004f0 <MX_TIM6_Init+0x6c>)
 8000498:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2799;
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_TIM6_Init+0x68>)
 800049c:	f640 22ef 	movw	r2, #2799	@ 0xaef
 80004a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <MX_TIM6_Init+0x68>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80004a8:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <MX_TIM6_Init+0x68>)
 80004aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_TIM6_Init+0x68>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004b6:	480d      	ldr	r0, [pc, #52]	@ (80004ec <MX_TIM6_Init+0x68>)
 80004b8:	f001 fe80 	bl	80021bc <HAL_TIM_Base_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80004c2:	f000 f963 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	4806      	ldr	r0, [pc, #24]	@ (80004ec <MX_TIM6_Init+0x68>)
 80004d4:	f002 f940 	bl	8002758 <HAL_TIMEx_MasterConfigSynchronization>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80004de:	f000 f955 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2400002c 	.word	0x2400002c
 80004f0:	40001000 	.word	0x40001000

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b3f      	ldr	r3, [pc, #252]	@ (8000608 <MX_GPIO_Init+0x114>)
 800050c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000510:	4a3d      	ldr	r2, [pc, #244]	@ (8000608 <MX_GPIO_Init+0x114>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800051a:	4b3b      	ldr	r3, [pc, #236]	@ (8000608 <MX_GPIO_Init+0x114>)
 800051c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000528:	4b37      	ldr	r3, [pc, #220]	@ (8000608 <MX_GPIO_Init+0x114>)
 800052a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800052e:	4a36      	ldr	r2, [pc, #216]	@ (8000608 <MX_GPIO_Init+0x114>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000538:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <MX_GPIO_Init+0x114>)
 800053a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800053e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b30      	ldr	r3, [pc, #192]	@ (8000608 <MX_GPIO_Init+0x114>)
 8000548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800054c:	4a2e      	ldr	r2, [pc, #184]	@ (8000608 <MX_GPIO_Init+0x114>)
 800054e:	f043 0302 	orr.w	r3, r3, #2
 8000552:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000556:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <MX_GPIO_Init+0x114>)
 8000558:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <MX_GPIO_Init+0x114>)
 8000566:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800056a:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <MX_GPIO_Init+0x114>)
 800056c:	f043 0310 	orr.w	r3, r3, #16
 8000570:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000574:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <MX_GPIO_Init+0x114>)
 8000576:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000588:	4820      	ldr	r0, [pc, #128]	@ (800060c <MX_GPIO_Init+0x118>)
 800058a:	f000 fe27 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2102      	movs	r1, #2
 8000592:	481f      	ldr	r0, [pc, #124]	@ (8000610 <MX_GPIO_Init+0x11c>)
 8000594:	f000 fe22 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4819      	ldr	r0, [pc, #100]	@ (8000614 <MX_GPIO_Init+0x120>)
 80005b0:	f000 fc64 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80005b4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480f      	ldr	r0, [pc, #60]	@ (800060c <MX_GPIO_Init+0x118>)
 80005ce:	f000 fc55 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <MX_GPIO_Init+0x11c>)
 80005ea:	f000 fc47 	bl	8000e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2028      	movs	r0, #40	@ 0x28
 80005f4:	f000 fb95 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f8:	2028      	movs	r0, #40	@ 0x28
 80005fa:	f000 fbac 	bl	8000d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	58024400 	.word	0x58024400
 800060c:	58020400 	.word	0x58020400
 8000610:	58021000 	.word	0x58021000
 8000614:	58020800 	.word	0x58020800

08000618 <set_led_state>:

/* USER CODE BEGIN 4 */
void set_led_state(uint8_t state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
    switch(state)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d827      	bhi.n	8000678 <set_led_state+0x60>
 8000628:	a201      	add	r2, pc, #4	@ (adr r2, 8000630 <set_led_state+0x18>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	08000641 	.word	0x08000641
 8000634:	0800064f 	.word	0x0800064f
 8000638:	0800065d 	.word	0x0800065d
 800063c:	0800066b 	.word	0x0800066b
    {
        case 0: // LED1 on
        	turn_on_led1();
 8000640:	f7ff fe54 	bl	80002ec <turn_on_led1>
        	turn_off_led2();
 8000644:	f7ff fe82 	bl	800034c <turn_off_led2>
        	turn_off_led3();
 8000648:	f7ff fe8c 	bl	8000364 <turn_off_led3>
            break;
 800064c:	e014      	b.n	8000678 <set_led_state+0x60>
        case 1: // LED2 on
            turn_off_led1();
 800064e:	f7ff fe71 	bl	8000334 <turn_off_led1>
            turn_on_led2();
 8000652:	f7ff fe57 	bl	8000304 <turn_on_led2>
            turn_off_led3();
 8000656:	f7ff fe85 	bl	8000364 <turn_off_led3>
            break;
 800065a:	e00d      	b.n	8000678 <set_led_state+0x60>
        case 2: // LED3 on
        	turn_off_led1();
 800065c:	f7ff fe6a 	bl	8000334 <turn_off_led1>
        	turn_off_led2();
 8000660:	f7ff fe74 	bl	800034c <turn_off_led2>
        	turn_on_led3();
 8000664:	f7ff fe5a 	bl	800031c <turn_on_led3>
            break;
 8000668:	e006      	b.n	8000678 <set_led_state+0x60>
        case 3: // All LED off
        	turn_off_led1();
 800066a:	f7ff fe63 	bl	8000334 <turn_off_led1>
        	turn_off_led2();
 800066e:	f7ff fe6d 	bl	800034c <turn_off_led2>
        	turn_off_led3();
 8000672:	f7ff fe77 	bl	8000364 <turn_off_led3>
        	break;
 8000676:	bf00      	nop
    }
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <HAL_GPIO_EXTI_Callback>:
}

#else
int count_click = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_BUTTON_PIN)
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000690:	d10f      	bne.n	80006b2 <HAL_GPIO_EXTI_Callback+0x32>
	{
		count_click++;
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <HAL_GPIO_EXTI_Callback+0x3c>)
 800069a:	6013      	str	r3, [r2, #0]
		if (count_click == 3)
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <HAL_GPIO_EXTI_Callback+0x3c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d102      	bne.n	80006aa <HAL_GPIO_EXTI_Callback+0x2a>
			count_click = 1;
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <HAL_GPIO_EXTI_Callback+0x3c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <HAL_GPIO_EXTI_Callback+0x40>)
 80006ac:	f001 fdde 	bl	800226c <HAL_TIM_Base_Start_IT>
	}
	else
	{
		__NOP();
	}
}
 80006b0:	e000      	b.n	80006b4 <HAL_GPIO_EXTI_Callback+0x34>
		__NOP();
 80006b2:	bf00      	nop
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2400007c 	.word	0x2400007c
 80006c0:	2400002c 	.word	0x2400002c

080006c4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a12      	ldr	r2, [pc, #72]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d11d      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		if (count_click == 2)
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d116      	bne.n	800070c <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			set_led_state(count);
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff98 	bl	8000618 <set_led_state>
			count = (count + 1) % 3;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006f0:	fb83 3102 	smull	r3, r1, r3, r2
 80006f4:	17d3      	asrs	r3, r2, #31
 80006f6:	1ac9      	subs	r1, r1, r3
 80006f8:	460b      	mov	r3, r1
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	440b      	add	r3, r1
 80006fe:	1ad1      	subs	r1, r2, r3
 8000700:	b2ca      	uxtb	r2, r1
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000704:	701a      	strb	r2, [r3, #0]
			stateDouble = false;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_Base_Stop_IT(&htim6);
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800070e:	f001 fe25 	bl	800235c <HAL_TIM_Base_Stop_IT>
	}
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40001000 	.word	0x40001000
 8000720:	2400007c 	.word	0x2400007c
 8000724:	24000079 	.word	0x24000079
 8000728:	55555556 	.word	0x55555556
 800072c:	24000078 	.word	0x24000078
 8000730:	2400002c 	.word	0x2400002c

08000734 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000746:	f000 fb21 	bl	8000d8c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800074a:	2301      	movs	r3, #1
 800074c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800074e:	2300      	movs	r3, #0
 8000750:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000756:	231f      	movs	r3, #31
 8000758:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800075a:	2387      	movs	r3, #135	@ 0x87
 800075c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800075e:	2300      	movs	r3, #0
 8000760:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000762:	2300      	movs	r3, #0
 8000764:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000766:	2301      	movs	r3, #1
 8000768:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800076a:	2301      	movs	r3, #1
 800076c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fb3f 	bl	8000dfc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800077e:	2004      	movs	r0, #4
 8000780:	f000 fb1c 	bl	8000dbc <HAL_MPU_Enable>

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <Error_Handler+0x8>

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_MspInit+0x30>)
 80007a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80007a4:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <HAL_MspInit+0x30>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_MspInit+0x30>)
 80007b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	58024400 	.word	0x58024400

080007cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d116      	bne.n	800080c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_TIM_Base_MspInit+0x4c>)
 80007e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <HAL_TIM_Base_MspInit+0x4c>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_TIM_Base_MspInit+0x4c>)
 80007f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2036      	movs	r0, #54	@ 0x36
 8000802:	f000 fa8e 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000806:	2036      	movs	r0, #54	@ 0x36
 8000808:	f000 faa5 	bl	8000d56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40001000 	.word	0x40001000
 8000818:	58024400 	.word	0x58024400

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 f95b 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800087e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000882:	f000 fcc4 	bl	800120e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000890:	4802      	ldr	r0, [pc, #8]	@ (800089c <TIM6_DAC_IRQHandler+0x10>)
 8000892:	f001 fd92 	bl	80023ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2400002c 	.word	0x2400002c

080008a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a4:	4b3e      	ldr	r3, [pc, #248]	@ (80009a0 <SystemInit+0x100>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008aa:	4a3d      	ldr	r2, [pc, #244]	@ (80009a0 <SystemInit+0x100>)
 80008ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008b4:	4b3b      	ldr	r3, [pc, #236]	@ (80009a4 <SystemInit+0x104>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d807      	bhi.n	80008d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008c0:	4b38      	ldr	r3, [pc, #224]	@ (80009a4 <SystemInit+0x104>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 030f 	bic.w	r3, r3, #15
 80008c8:	4a36      	ldr	r2, [pc, #216]	@ (80009a4 <SystemInit+0x104>)
 80008ca:	f043 0303 	orr.w	r3, r3, #3
 80008ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008d0:	4b35      	ldr	r3, [pc, #212]	@ (80009a8 <SystemInit+0x108>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a34      	ldr	r2, [pc, #208]	@ (80009a8 <SystemInit+0x108>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008dc:	4b32      	ldr	r3, [pc, #200]	@ (80009a8 <SystemInit+0x108>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008e2:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <SystemInit+0x108>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4930      	ldr	r1, [pc, #192]	@ (80009a8 <SystemInit+0x108>)
 80008e8:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <SystemInit+0x10c>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ee:	4b2d      	ldr	r3, [pc, #180]	@ (80009a4 <SystemInit+0x104>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d007      	beq.n	800090a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <SystemInit+0x104>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f023 030f 	bic.w	r3, r3, #15
 8000902:	4a28      	ldr	r2, [pc, #160]	@ (80009a4 <SystemInit+0x104>)
 8000904:	f043 0303 	orr.w	r3, r3, #3
 8000908:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800090a:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <SystemInit+0x108>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000910:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <SystemInit+0x108>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000916:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <SystemInit+0x108>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800091c:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <SystemInit+0x108>)
 800091e:	4a24      	ldr	r2, [pc, #144]	@ (80009b0 <SystemInit+0x110>)
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <SystemInit+0x108>)
 8000924:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <SystemInit+0x114>)
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <SystemInit+0x108>)
 800092a:	4a23      	ldr	r2, [pc, #140]	@ (80009b8 <SystemInit+0x118>)
 800092c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <SystemInit+0x108>)
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <SystemInit+0x108>)
 8000936:	4a20      	ldr	r2, [pc, #128]	@ (80009b8 <SystemInit+0x118>)
 8000938:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <SystemInit+0x108>)
 800093c:	2200      	movs	r2, #0
 800093e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <SystemInit+0x108>)
 8000942:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <SystemInit+0x118>)
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <SystemInit+0x108>)
 8000948:	2200      	movs	r2, #0
 800094a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <SystemInit+0x108>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a15      	ldr	r2, [pc, #84]	@ (80009a8 <SystemInit+0x108>)
 8000952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000956:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <SystemInit+0x108>)
 800095a:	2200      	movs	r2, #0
 800095c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <SystemInit+0x108>)
 8000960:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d113      	bne.n	8000994 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <SystemInit+0x108>)
 800096e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000972:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <SystemInit+0x108>)
 8000974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000978:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <SystemInit+0x11c>)
 800097e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000982:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <SystemInit+0x108>)
 8000986:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800098a:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <SystemInit+0x108>)
 800098c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000990:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00
 80009a4:	52002000 	.word	0x52002000
 80009a8:	58024400 	.word	0x58024400
 80009ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80009b0:	02020200 	.word	0x02020200
 80009b4:	01ff0000 	.word	0x01ff0000
 80009b8:	01010280 	.word	0x01010280
 80009bc:	52004000 	.word	0x52004000

080009c0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <ExitRun0Mode+0x2c>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <ExitRun0Mode+0x2c>)
 80009ca:	f023 0302 	bic.w	r3, r3, #2
 80009ce:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009d0:	bf00      	nop
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <ExitRun0Mode+0x2c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f9      	beq.n	80009d2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	58024800 	.word	0x58024800

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80009f4:	f7ff ffe4 	bl	80009c0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f8:	f7ff ff52 	bl	80008a0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	@ (8000a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f001 ff4d 	bl	80028c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a26:	f7ff fca9 	bl	800037c <main>
  bx  lr
 8000a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000a30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a34:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a38:	08002938 	.word	0x08002938
  ldr r2, =_sbss
 8000a3c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a40:	24000084 	.word	0x24000084

08000a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f000 f95c 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000a54:	f001 fa38 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_Init+0x68>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	4913      	ldr	r1, [pc, #76]	@ (8000ab4 <HAL_Init+0x6c>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a70:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_Init+0x68>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <HAL_Init+0x6c>)
 8000a7c:	5cd3      	ldrb	r3, [r2, r3]
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	fa22 f303 	lsr.w	r3, r2, r3
 8000a88:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab8 <HAL_Init+0x70>)
 8000a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_Init+0x74>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f814 	bl	8000ac0 <HAL_InitTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e002      	b.n	8000aa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa2:	f7ff fe79 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	08002920 	.word	0x08002920
 8000ab8:	24000004 	.word	0x24000004
 8000abc:	24000000 	.word	0x24000000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_InitTick+0x60>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e021      	b.n	8000b18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_InitTick+0x64>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_InitTick+0x60>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f941 	bl	8000d72 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f90b 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	@ (8000b28 <HAL_InitTick+0x68>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2400000c 	.word	0x2400000c
 8000b24:	24000000 	.word	0x24000000
 8000b28:	24000008 	.word	0x24000008

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2400000c 	.word	0x2400000c
 8000b50:	24000080 	.word	0x24000080

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	24000080 	.word	0x24000080

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	05fa0000 	.word	0x05fa0000

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d90:	f3bf 8f5f 	dmb	sy
}
 8000d94:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <HAL_MPU_Disable+0x28>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9a:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_MPU_Disable+0x28>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000da0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_MPU_Disable+0x2c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00
 8000db8:	e000ed90 	.word	0xe000ed90

08000dbc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <HAL_MPU_Enable+0x38>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <HAL_MPU_Enable+0x3c>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd2:	4a09      	ldr	r2, [pc, #36]	@ (8000df8 <HAL_MPU_Enable+0x3c>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dda:	f3bf 8f4f 	dsb	sy
}
 8000dde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000de0:	f3bf 8f6f 	isb	sy
}
 8000de4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed90 	.word	0xe000ed90
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	785a      	ldrb	r2, [r3, #1]
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <HAL_MPU_ConfigRegion+0x7c>)
 8000e0a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <HAL_MPU_ConfigRegion+0x7c>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_MPU_ConfigRegion+0x7c>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e18:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <HAL_MPU_ConfigRegion+0x7c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7b1b      	ldrb	r3, [r3, #12]
 8000e24:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7adb      	ldrb	r3, [r3, #11]
 8000e2a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7a9b      	ldrb	r3, [r3, #10]
 8000e32:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7b5b      	ldrb	r3, [r3, #13]
 8000e3a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7b9b      	ldrb	r3, [r3, #14]
 8000e42:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7bdb      	ldrb	r3, [r3, #15]
 8000e4a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7a5b      	ldrb	r3, [r3, #9]
 8000e52:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7a1b      	ldrb	r3, [r3, #8]
 8000e5a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e5c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e66:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e68:	6113      	str	r3, [r2, #16]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed90 	.word	0xe000ed90

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e8a:	4b89      	ldr	r3, [pc, #548]	@ (80010b0 <HAL_GPIO_Init+0x234>)
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e8e:	e194      	b.n	80011ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8186 	beq.w	80011b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x44>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	69b9      	ldr	r1, [r7, #24]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80e0 	beq.w	80011b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <HAL_GPIO_Init+0x238>)
 8000ff6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <HAL_GPIO_Init+0x238>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001004:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <HAL_GPIO_Init+0x238>)
 8001006:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <HAL_GPIO_Init+0x23c>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <HAL_GPIO_Init+0x240>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d052      	beq.n	80010e4 <HAL_GPIO_Init+0x268>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <HAL_GPIO_Init+0x244>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d031      	beq.n	80010aa <HAL_GPIO_Init+0x22e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <HAL_GPIO_Init+0x248>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d02b      	beq.n	80010a6 <HAL_GPIO_Init+0x22a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <HAL_GPIO_Init+0x24c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d025      	beq.n	80010a2 <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <HAL_GPIO_Init+0x250>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01f      	beq.n	800109e <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <HAL_GPIO_Init+0x254>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1a      	ldr	r2, [pc, #104]	@ (80010d4 <HAL_GPIO_Init+0x258>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_GPIO_Init+0x25c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x216>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <HAL_GPIO_Init+0x260>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x212>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_GPIO_Init+0x264>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x20e>
 8001086:	2309      	movs	r3, #9
 8001088:	e02d      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800108a:	230a      	movs	r3, #10
 800108c:	e02b      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800108e:	2308      	movs	r3, #8
 8001090:	e029      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 8001092:	2307      	movs	r3, #7
 8001094:	e027      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 8001096:	2306      	movs	r3, #6
 8001098:	e025      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800109a:	2305      	movs	r3, #5
 800109c:	e023      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800109e:	2304      	movs	r3, #4
 80010a0:	e021      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e01f      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e01d      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e01b      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010ae:	bf00      	nop
 80010b0:	58000080 	.word	0x58000080
 80010b4:	58024400 	.word	0x58024400
 80010b8:	58000400 	.word	0x58000400
 80010bc:	58020000 	.word	0x58020000
 80010c0:	58020400 	.word	0x58020400
 80010c4:	58020800 	.word	0x58020800
 80010c8:	58020c00 	.word	0x58020c00
 80010cc:	58021000 	.word	0x58021000
 80010d0:	58021400 	.word	0x58021400
 80010d4:	58021800 	.word	0x58021800
 80010d8:	58021c00 	.word	0x58021c00
 80010dc:	58022000 	.word	0x58022000
 80010e0:	58022400 	.word	0x58022400
 80010e4:	2300      	movs	r3, #0
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f6:	4938      	ldr	r1, [pc, #224]	@ (80011d8 <HAL_GPIO_Init+0x35c>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800112a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f47f ae63 	bne.w	8000e90 <HAL_GPIO_Init+0x14>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3724      	adds	r7, #36	@ 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	58000400 	.word	0x58000400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fa23 	bl	8000680 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	2b06      	cmp	r3, #6
 8001256:	d00a      	beq.n	800126e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	d001      	beq.n	800126a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e040      	b.n	80012ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e03e      	b.n	80012ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001276:	491f      	ldr	r1, [pc, #124]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4313      	orrs	r3, r2
 800127c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800127e:	f7ff fc69 	bl	8000b54 <HAL_GetTick>
 8001282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001284:	e009      	b.n	800129a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001286:	f7ff fc65 	bl	8000b54 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001294:	d901      	bls.n	800129a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e028      	b.n	80012ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012a6:	d1ee      	bne.n	8001286 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b1e      	cmp	r3, #30
 80012ac:	d008      	beq.n	80012c0 <HAL_PWREx_ConfigSupply+0x7c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80012b2:	d005      	beq.n	80012c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b1d      	cmp	r3, #29
 80012b8:	d002      	beq.n	80012c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80012be:	d114      	bne.n	80012ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80012c0:	f7ff fc48 	bl	8000b54 <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012c6:	e009      	b.n	80012dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012c8:	f7ff fc44 	bl	8000b54 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012d6:	d901      	bls.n	80012dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e007      	b.n	80012ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e8:	d1ee      	bne.n	80012c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	58024800 	.word	0x58024800

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f000 bc1f 	b.w	8001b4a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80b3 	beq.w	8001480 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131a:	4b95      	ldr	r3, [pc, #596]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001324:	4b92      	ldr	r3, [pc, #584]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800132a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800132c:	2b10      	cmp	r3, #16
 800132e:	d007      	beq.n	8001340 <HAL_RCC_OscConfig+0x48>
 8001330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001332:	2b18      	cmp	r3, #24
 8001334:	d112      	bne.n	800135c <HAL_RCC_OscConfig+0x64>
 8001336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d10d      	bne.n	800135c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	4b8b      	ldr	r3, [pc, #556]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8098 	beq.w	800147e <HAL_RCC_OscConfig+0x186>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8093 	bne.w	800147e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e3f6      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x7c>
 8001366:	4b82      	ldr	r3, [pc, #520]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a81      	ldr	r2, [pc, #516]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e058      	b.n	8001426 <HAL_RCC_OscConfig+0x12e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d112      	bne.n	80013a2 <HAL_RCC_OscConfig+0xaa>
 800137c:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a7b      	ldr	r2, [pc, #492]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b79      	ldr	r3, [pc, #484]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a78      	ldr	r2, [pc, #480]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800138e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b76      	ldr	r3, [pc, #472]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a75      	ldr	r2, [pc, #468]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e041      	b.n	8001426 <HAL_RCC_OscConfig+0x12e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013aa:	d112      	bne.n	80013d2 <HAL_RCC_OscConfig+0xda>
 80013ac:	4b70      	ldr	r3, [pc, #448]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a6f      	ldr	r2, [pc, #444]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a69      	ldr	r2, [pc, #420]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e029      	b.n	8001426 <HAL_RCC_OscConfig+0x12e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80013da:	d112      	bne.n	8001402 <HAL_RCC_OscConfig+0x10a>
 80013dc:	4b64      	ldr	r3, [pc, #400]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a63      	ldr	r2, [pc, #396]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b61      	ldr	r3, [pc, #388]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e011      	b.n	8001426 <HAL_RCC_OscConfig+0x12e>
 8001402:	4b5b      	ldr	r3, [pc, #364]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a5a      	ldr	r2, [pc, #360]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b58      	ldr	r3, [pc, #352]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a57      	ldr	r2, [pc, #348]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001414:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a54      	ldr	r2, [pc, #336]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001420:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001424:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d013      	beq.n	8001456 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fb91 	bl	8000b54 <HAL_GetTick>
 8001432:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001436:	f7ff fb8d 	bl	8000b54 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b64      	cmp	r3, #100	@ 0x64
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e380      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001448:	4b49      	ldr	r3, [pc, #292]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x13e>
 8001454:	e014      	b.n	8001480 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fb7d 	bl	8000b54 <HAL_GetTick>
 800145a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff fb79 	bl	8000b54 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	@ 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e36c      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001470:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x166>
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 808c 	beq.w	80015a6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001496:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001498:	4b35      	ldr	r3, [pc, #212]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1bc>
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	d137      	bne.n	800151a <HAL_RCC_OscConfig+0x222>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d132      	bne.n	800151a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x1d4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e33e      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 0219 	bic.w	r2, r3, #25
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4925      	ldr	r1, [pc, #148]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fb39 	bl	8000b54 <HAL_GetTick>
 80014e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb35 	bl	8000b54 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e328      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	4917      	ldr	r1, [pc, #92]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d028      	beq.n	8001574 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 0219 	bic.w	r2, r3, #25
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	4910      	ldr	r1, [pc, #64]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fb0e 	bl	8000b54 <HAL_GetTick>
 8001538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fb0a 	bl	8000b54 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e2fd      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	061b      	lsls	r3, r3, #24
 8001568:	4901      	ldr	r1, [pc, #4]	@ (8001570 <HAL_RCC_OscConfig+0x278>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
 800156e:	e01a      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ae>
 8001570:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	4b97      	ldr	r3, [pc, #604]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a96      	ldr	r2, [pc, #600]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fae8 	bl	8000b54 <HAL_GetTick>
 8001584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fae4 	bl	8000b54 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e2d7      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800159a:	4b8e      	ldr	r3, [pc, #568]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06a      	beq.n	8001688 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b2:	4b88      	ldr	r3, [pc, #544]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015bc:	4b85      	ldr	r3, [pc, #532]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d007      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2e0>
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b18      	cmp	r3, #24
 80015cc:	d11b      	bne.n	8001606 <HAL_RCC_OscConfig+0x30e>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d116      	bne.n	8001606 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015d8:	4b7e      	ldr	r3, [pc, #504]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2f8>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b80      	cmp	r3, #128	@ 0x80
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e2ac      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f0:	4b78      	ldr	r3, [pc, #480]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	4975      	ldr	r1, [pc, #468]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001604:	e040      	b.n	8001688 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d023      	beq.n	8001656 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800160e:	4b71      	ldr	r3, [pc, #452]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a70      	ldr	r2, [pc, #448]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fa9b 	bl	8000b54 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001622:	f7ff fa97 	bl	8000b54 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e28a      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001634:	4b67      	ldr	r3, [pc, #412]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001640:	4b64      	ldr	r3, [pc, #400]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	4961      	ldr	r1, [pc, #388]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001650:	4313      	orrs	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
 8001654:	e018      	b.n	8001688 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001656:	4b5f      	ldr	r3, [pc, #380]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5e      	ldr	r2, [pc, #376]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800165c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fa77 	bl	8000b54 <HAL_GetTick>
 8001666:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800166a:	f7ff fa73 	bl	8000b54 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e266      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800167c:	4b55      	ldr	r3, [pc, #340]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d036      	beq.n	8001702 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d019      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169c:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800169e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a0:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fa54 	bl	8000b54 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff fa50 	bl	8000b54 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e243      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016c2:	4b44      	ldr	r3, [pc, #272]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x3b8>
 80016ce:	e018      	b.n	8001702 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d0:	4b40      	ldr	r3, [pc, #256]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d4:	4a3f      	ldr	r2, [pc, #252]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fa3a 	bl	8000b54 <HAL_GetTick>
 80016e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fa36 	bl	8000b54 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e229      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016f6:	4b37      	ldr	r3, [pc, #220]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80016f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	2b00      	cmp	r3, #0
 800170c:	d036      	beq.n	800177c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2e      	ldr	r2, [pc, #184]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800171c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001720:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001722:	f7ff fa17 	bl	8000b54 <HAL_GetTick>
 8001726:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800172a:	f7ff fa13 	bl	8000b54 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e206      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x432>
 8001748:	e018      	b.n	800177c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800174a:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a21      	ldr	r2, [pc, #132]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001754:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001756:	f7ff f9fd 	bl	8000b54 <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175e:	f7ff f9f9 	bl	8000b54 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1ec      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80af 	beq.w	80018e8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_RCC_OscConfig+0x4e0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <HAL_RCC_OscConfig+0x4e0>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001796:	f7ff f9dd 	bl	8000b54 <HAL_GetTick>
 800179a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff f9d9 	bl	8000b54 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	@ 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1cc      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_OscConfig+0x4e0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x4e4>
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a02      	ldr	r2, [pc, #8]	@ (80017d4 <HAL_RCC_OscConfig+0x4dc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d0:	e05b      	b.n	800188a <HAL_RCC_OscConfig+0x592>
 80017d2:	bf00      	nop
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58024800 	.word	0x58024800
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d112      	bne.n	800180a <HAL_RCC_OscConfig+0x512>
 80017e4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f0:	4b9a      	ldr	r3, [pc, #616]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f4:	4a99      	ldr	r2, [pc, #612]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80017f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fc:	4b97      	ldr	r3, [pc, #604]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001800:	4a96      	ldr	r2, [pc, #600]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	6713      	str	r3, [r2, #112]	@ 0x70
 8001808:	e03f      	b.n	800188a <HAL_RCC_OscConfig+0x592>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d112      	bne.n	8001838 <HAL_RCC_OscConfig+0x540>
 8001812:	4b92      	ldr	r3, [pc, #584]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a91      	ldr	r2, [pc, #580]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
 800181e:	4b8f      	ldr	r3, [pc, #572]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a8e      	ldr	r2, [pc, #568]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
 800182a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182e:	4a8b      	ldr	r2, [pc, #556]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	@ 0x70
 8001836:	e028      	b.n	800188a <HAL_RCC_OscConfig+0x592>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b85      	cmp	r3, #133	@ 0x85
 800183e:	d112      	bne.n	8001866 <HAL_RCC_OscConfig+0x56e>
 8001840:	4b86      	ldr	r3, [pc, #536]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	4a85      	ldr	r2, [pc, #532]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6713      	str	r3, [r2, #112]	@ 0x70
 800184c:	4b83      	ldr	r3, [pc, #524]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001850:	4a82      	ldr	r2, [pc, #520]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001856:	6713      	str	r3, [r2, #112]	@ 0x70
 8001858:	4b80      	ldr	r3, [pc, #512]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	@ 0x70
 8001864:	e011      	b.n	800188a <HAL_RCC_OscConfig+0x592>
 8001866:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	@ 0x70
 8001872:	4b7a      	ldr	r3, [pc, #488]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001876:	4a79      	ldr	r2, [pc, #484]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6713      	str	r3, [r2, #112]	@ 0x70
 800187e:	4b77      	ldr	r3, [pc, #476]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001882:	4a76      	ldr	r2, [pc, #472]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001888:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff f95f 	bl	8000b54 <HAL_GetTick>
 8001896:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff f95b 	bl	8000b54 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e14c      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ee      	beq.n	800189a <HAL_RCC_OscConfig+0x5a2>
 80018bc:	e014      	b.n	80018e8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f949 	bl	8000b54 <HAL_GetTick>
 80018c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f945 	bl	8000b54 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e136      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ee      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 812b 	beq.w	8001b48 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018f2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018fa:	2b18      	cmp	r3, #24
 80018fc:	f000 80bb 	beq.w	8001a76 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	2b02      	cmp	r3, #2
 8001906:	f040 8095 	bne.w	8001a34 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b54      	ldr	r3, [pc, #336]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a53      	ldr	r2, [pc, #332]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001910:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff f91d 	bl	8000b54 <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff f919 	bl	8000b54 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e10c      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001930:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800193e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001940:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_OscConfig+0x768>)
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	430a      	orrs	r2, r1
 8001950:	4942      	ldr	r1, [pc, #264]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001952:	4313      	orrs	r3, r2
 8001954:	628b      	str	r3, [r1, #40]	@ 0x28
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	3b01      	subs	r3, #1
 800195c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001964:	3b01      	subs	r3, #1
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	b29b      	uxth	r3, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197e:	3b01      	subs	r3, #1
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001986:	4935      	ldr	r1, [pc, #212]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001988:	4313      	orrs	r3, r2
 800198a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800198c:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001990:	4a32      	ldr	r2, [pc, #200]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 800199a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_OscConfig+0x76c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019a4:	00d2      	lsls	r2, r2, #3
 80019a6:	492d      	ldr	r1, [pc, #180]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	f023 020c 	bic.w	r2, r3, #12
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4928      	ldr	r1, [pc, #160]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	f023 0202 	bic.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4924      	ldr	r1, [pc, #144]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	4a18      	ldr	r2, [pc, #96]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a15      	ldr	r2, [pc, #84]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f8a2 	bl	8000b54 <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f89e 	bl	8000b54 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e091      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x71c>
 8001a32:	e089      	b.n	8001b48 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_RCC_OscConfig+0x764>)
 8001a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f888 	bl	8000b54 <HAL_GetTick>
 8001a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f884 	bl	8000b54 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e077      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
 8001a5a:	bf00      	nop
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	fffffc0c 	.word	0xfffffc0c
 8001a64:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a68:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <HAL_RCC_OscConfig+0x750>
 8001a74:	e068      	b.n	8001b48 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a7c:	4b35      	ldr	r3, [pc, #212]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d031      	beq.n	8001aee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d12a      	bne.n	8001aee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d122      	bne.n	8001aee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d11a      	bne.n	8001aee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	0a5b      	lsrs	r3, r3, #9
 8001abc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d111      	bne.n	8001aee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d108      	bne.n	8001aee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0e1b      	lsrs	r3, r3, #24
 8001ae0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e02b      	b.n	8001b4a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001afc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d01f      	beq.n	8001b48 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b14:	f7ff f81e 	bl	8000b54 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff f81a 	bl	8000b54 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d0f9      	beq.n	8001b1c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_RCC_OscConfig+0x860>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	4907      	ldr	r1, [pc, #28]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_RCC_OscConfig+0x85c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3730      	adds	r7, #48	@ 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	58024400 	.word	0x58024400
 8001b58:	ffff0007 	.word	0xffff0007

08001b5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e19c      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b8a      	ldr	r3, [pc, #552]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b87      	ldr	r3, [pc, #540]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 020f 	bic.w	r2, r3, #15
 8001b86:	4985      	ldr	r1, [pc, #532]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b83      	ldr	r3, [pc, #524]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e184      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d010      	beq.n	8001bce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d908      	bls.n	8001bce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bbc:	4b78      	ldr	r3, [pc, #480]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4975      	ldr	r1, [pc, #468]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d010      	beq.n	8001bfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	4b70      	ldr	r3, [pc, #448]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d908      	bls.n	8001bfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bea:	4b6d      	ldr	r3, [pc, #436]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	496a      	ldr	r1, [pc, #424]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	4b64      	ldr	r3, [pc, #400]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d908      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c18:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	495e      	ldr	r1, [pc, #376]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c46:	4b56      	ldr	r3, [pc, #344]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4953      	ldr	r1, [pc, #332]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d908      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f023 020f 	bic.w	r2, r3, #15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4947      	ldr	r1, [pc, #284]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d055      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c92:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4940      	ldr	r1, [pc, #256]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cac:	4b3c      	ldr	r3, [pc, #240]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d121      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0f6      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc4:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0ea      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cdc:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0de      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cec:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d6      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4925      	ldr	r1, [pc, #148]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0e:	f7fe ff21 	bl	8000b54 <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7fe ff1d 	bl	8000b54 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0be      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d1eb      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d208      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f023 020f 	bic.w	r2, r3, #15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	490e      	ldr	r1, [pc, #56]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d214      	bcs.n	8001da4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 020f 	bic.w	r2, r3, #15
 8001d82:	4906      	ldr	r1, [pc, #24]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e086      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
 8001d9c:	52002000 	.word	0x52002000
 8001da0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d208      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4939      	ldr	r1, [pc, #228]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d208      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dee:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	492e      	ldr	r1, [pc, #184]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d208      	bcs.n	8001e2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4922      	ldr	r1, [pc, #136]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d208      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4917      	ldr	r1, [pc, #92]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e5c:	f000 f834 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	4912      	ldr	r1, [pc, #72]	@ (8001eb8 <HAL_RCC_ClockConfig+0x35c>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <HAL_RCC_ClockConfig+0x35c>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <HAL_RCC_ClockConfig+0x360>)
 8001e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x364>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_RCC_ClockConfig+0x368>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fe0e 	bl	8000ac0 <HAL_InitTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	08002920 	.word	0x08002920
 8001ebc:	24000004 	.word	0x24000004
 8001ec0:	24000000 	.word	0x24000000
 8001ec4:	24000008 	.word	0x24000008

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ece:	4bb3      	ldr	r3, [pc, #716]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	f200 8155 	bhi.w	8002186 <HAL_RCC_GetSysClockFreq+0x2be>
 8001edc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001f49 	.word	0x08001f49
 8001ee8:	08002187 	.word	0x08002187
 8001eec:	08002187 	.word	0x08002187
 8001ef0:	08002187 	.word	0x08002187
 8001ef4:	08002187 	.word	0x08002187
 8001ef8:	08002187 	.word	0x08002187
 8001efc:	08002187 	.word	0x08002187
 8001f00:	08002187 	.word	0x08002187
 8001f04:	08001f6f 	.word	0x08001f6f
 8001f08:	08002187 	.word	0x08002187
 8001f0c:	08002187 	.word	0x08002187
 8001f10:	08002187 	.word	0x08002187
 8001f14:	08002187 	.word	0x08002187
 8001f18:	08002187 	.word	0x08002187
 8001f1c:	08002187 	.word	0x08002187
 8001f20:	08002187 	.word	0x08002187
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08002187 	.word	0x08002187
 8001f2c:	08002187 	.word	0x08002187
 8001f30:	08002187 	.word	0x08002187
 8001f34:	08002187 	.word	0x08002187
 8001f38:	08002187 	.word	0x08002187
 8001f3c:	08002187 	.word	0x08002187
 8001f40:	08002187 	.word	0x08002187
 8001f44:	08001f7b 	.word	0x08001f7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f48:	4b94      	ldr	r3, [pc, #592]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f54:	4b91      	ldr	r3, [pc, #580]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	4a90      	ldr	r2, [pc, #576]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f66:	e111      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f68:	4b8d      	ldr	r3, [pc, #564]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f6a:	61bb      	str	r3, [r7, #24]
      break;
 8001f6c:	e10e      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f70:	61bb      	str	r3, [r7, #24]
      break;
 8001f72:	e10b      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f74:	4b8c      	ldr	r3, [pc, #560]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f76:	61bb      	str	r3, [r7, #24]
      break;
 8001f78:	e108      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f7a:	4b88      	ldr	r3, [pc, #544]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f84:	4b85      	ldr	r3, [pc, #532]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f90:	4b82      	ldr	r3, [pc, #520]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f9a:	4b80      	ldr	r3, [pc, #512]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80e1 	beq.w	8002180 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	f000 8083 	beq.w	80020cc <HAL_RCC_GetSysClockFreq+0x204>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	f200 80a1 	bhi.w	8002110 <HAL_RCC_GetSysClockFreq+0x248>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x114>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d056      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fda:	e099      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d02d      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	4a6b      	ldr	r2, [pc, #428]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002012:	4b62      	ldr	r3, [pc, #392]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002022:	ed97 6a02 	vldr	s12, [r7, #8]
 8002026:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800202a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800202e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002042:	e087      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002056:	4b51      	ldr	r3, [pc, #324]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002066:	ed97 6a02 	vldr	s12, [r7, #8]
 800206a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800206e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800207a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002086:	e065      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80021b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209a:	4b40      	ldr	r3, [pc, #256]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ca:	e043      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80021b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80020da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020de:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80020f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800210e:	e021      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80021b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800211e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002132:	ed97 6a02 	vldr	s12, [r7, #8]
 8002136:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800213a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800213e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002152:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	0a5b      	lsrs	r3, r3, #9
 800215a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800215e:	3301      	adds	r3, #1
 8002160:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002178:	ee17 3a90 	vmov	r3, s15
 800217c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002188:	61bb      	str	r3, [r7, #24]
      break;
 800218a:	bf00      	nop
  }

  return sysclockfreq;
 800218c:	69bb      	ldr	r3, [r7, #24]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58024400 	.word	0x58024400
 80021a0:	03d09000 	.word	0x03d09000
 80021a4:	003d0900 	.word	0x003d0900
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	46000000 	.word	0x46000000
 80021b0:	4c742400 	.word	0x4c742400
 80021b4:	4a742400 	.word	0x4a742400
 80021b8:	4af42400 	.word	0x4af42400

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e049      	b.n	8002262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe faf2 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fa0c 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e054      	b.n	800232e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a26      	ldr	r2, [pc, #152]	@ (800233c <HAL_TIM_Base_Start_IT+0xd0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d022      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ae:	d01d      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <HAL_TIM_Base_Start_IT+0xd4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d018      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <HAL_TIM_Base_Start_IT+0xd8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002348 <HAL_TIM_Base_Start_IT+0xdc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00e      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1e      	ldr	r2, [pc, #120]	@ (800234c <HAL_TIM_Base_Start_IT+0xe0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <HAL_TIM_Base_Start_IT+0xe4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x80>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002354 <HAL_TIM_Base_Start_IT+0xe8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d115      	bne.n	8002318 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_TIM_Base_Start_IT+0xec>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d015      	beq.n	800232a <HAL_TIM_Base_Start_IT+0xbe>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002304:	d011      	beq.n	800232a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002316:	e008      	b.n	800232a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e000      	b.n	800232c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800
 8002348:	40000c00 	.word	0x40000c00
 800234c:	40010400 	.word	0x40010400
 8002350:	40001800 	.word	0x40001800
 8002354:	40014000 	.word	0x40014000
 8002358:	00010007 	.word	0x00010007

0800235c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10f      	bne.n	80023a4 <HAL_TIM_Base_Stop_IT+0x48>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	f240 4344 	movw	r3, #1092	@ 0x444
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_Base_Stop_IT+0x48>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01b      	beq.n	800241e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f06f 0202 	mvn.w	r2, #2
 80023ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f8e9 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 800240a:	e005      	b.n	8002418 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f8db 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8ec 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01b      	beq.n	800246a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0204 	mvn.w	r2, #4
 800243a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8c3 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 8002456:	e005      	b.n	8002464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8b5 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8c6 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01b      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0208 	mvn.w	r2, #8
 8002486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f89d 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80024a2:	e005      	b.n	80024b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f88f 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8a0 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01b      	beq.n	8002502 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0210 	mvn.w	r2, #16
 80024d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2208      	movs	r2, #8
 80024d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f877 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80024ee:	e005      	b.n	80024fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f869 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f87a 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f06f 0201 	mvn.w	r2, #1
 800251e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7fe f8cf 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d104      	bne.n	800253a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f99a 	bl	8002888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f992 	bl	800289c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f834 	bl	8002604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0220 	mvn.w	r2, #32
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f95a 	bl	8002874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <TIM_Base_SetConfig+0x120>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <TIM_Base_SetConfig+0x40>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002636:	d00f      	beq.n	8002658 <TIM_Base_SetConfig+0x40>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a40      	ldr	r2, [pc, #256]	@ (800273c <TIM_Base_SetConfig+0x124>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00b      	beq.n	8002658 <TIM_Base_SetConfig+0x40>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <TIM_Base_SetConfig+0x128>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x40>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3e      	ldr	r2, [pc, #248]	@ (8002744 <TIM_Base_SetConfig+0x12c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x40>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3d      	ldr	r2, [pc, #244]	@ (8002748 <TIM_Base_SetConfig+0x130>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <TIM_Base_SetConfig+0x120>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002678:	d01b      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2f      	ldr	r2, [pc, #188]	@ (800273c <TIM_Base_SetConfig+0x124>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d017      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2e      	ldr	r2, [pc, #184]	@ (8002740 <TIM_Base_SetConfig+0x128>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2d      	ldr	r2, [pc, #180]	@ (8002744 <TIM_Base_SetConfig+0x12c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00f      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2c      	ldr	r2, [pc, #176]	@ (8002748 <TIM_Base_SetConfig+0x130>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2b      	ldr	r2, [pc, #172]	@ (800274c <TIM_Base_SetConfig+0x134>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002750 <TIM_Base_SetConfig+0x138>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_Base_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a29      	ldr	r2, [pc, #164]	@ (8002754 <TIM_Base_SetConfig+0x13c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <TIM_Base_SetConfig+0x120>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00f      	beq.n	800270a <TIM_Base_SetConfig+0xf2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <TIM_Base_SetConfig+0x130>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0xf2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a15      	ldr	r2, [pc, #84]	@ (800274c <TIM_Base_SetConfig+0x134>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0xf2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <TIM_Base_SetConfig+0x138>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0xf2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a13      	ldr	r2, [pc, #76]	@ (8002754 <TIM_Base_SetConfig+0x13c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d103      	bne.n	8002712 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40010000 	.word	0x40010000
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800
 8002744:	40000c00 	.word	0x40000c00
 8002748:	40010400 	.word	0x40010400
 800274c:	40014000 	.word	0x40014000
 8002750:	40014400 	.word	0x40014400
 8002754:	40014800 	.word	0x40014800

08002758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800276c:	2302      	movs	r3, #2
 800276e:	e06d      	b.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a30      	ldr	r2, [pc, #192]	@ (8002858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80027aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a20      	ldr	r2, [pc, #128]	@ (8002858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d022      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e2:	d01d      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d018      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002864 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00e      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d004      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40010000 	.word	0x40010000
 800285c:	40010400 	.word	0x40010400
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800
 8002868:	40000c00 	.word	0x40000c00
 800286c:	40001800 	.word	0x40001800
 8002870:	40014000 	.word	0x40014000

08002874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <memset>:
 80028b0:	4402      	add	r2, r0
 80028b2:	4603      	mov	r3, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <memset+0xa>
 80028b8:	4770      	bx	lr
 80028ba:	f803 1b01 	strb.w	r1, [r3], #1
 80028be:	e7f9      	b.n	80028b4 <memset+0x4>

080028c0 <__libc_init_array>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	4d0d      	ldr	r5, [pc, #52]	@ (80028f8 <__libc_init_array+0x38>)
 80028c4:	4c0d      	ldr	r4, [pc, #52]	@ (80028fc <__libc_init_array+0x3c>)
 80028c6:	1b64      	subs	r4, r4, r5
 80028c8:	10a4      	asrs	r4, r4, #2
 80028ca:	2600      	movs	r6, #0
 80028cc:	42a6      	cmp	r6, r4
 80028ce:	d109      	bne.n	80028e4 <__libc_init_array+0x24>
 80028d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002900 <__libc_init_array+0x40>)
 80028d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002904 <__libc_init_array+0x44>)
 80028d4:	f000 f818 	bl	8002908 <_init>
 80028d8:	1b64      	subs	r4, r4, r5
 80028da:	10a4      	asrs	r4, r4, #2
 80028dc:	2600      	movs	r6, #0
 80028de:	42a6      	cmp	r6, r4
 80028e0:	d105      	bne.n	80028ee <__libc_init_array+0x2e>
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e8:	4798      	blx	r3
 80028ea:	3601      	adds	r6, #1
 80028ec:	e7ee      	b.n	80028cc <__libc_init_array+0xc>
 80028ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f2:	4798      	blx	r3
 80028f4:	3601      	adds	r6, #1
 80028f6:	e7f2      	b.n	80028de <__libc_init_array+0x1e>
 80028f8:	08002930 	.word	0x08002930
 80028fc:	08002930 	.word	0x08002930
 8002900:	08002930 	.word	0x08002930
 8002904:	08002934 	.word	0x08002934

08002908 <_init>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr

08002914 <_fini>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	bf00      	nop
 8002918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291a:	bc08      	pop	{r3}
 800291c:	469e      	mov	lr, r3
 800291e:	4770      	bx	lr
