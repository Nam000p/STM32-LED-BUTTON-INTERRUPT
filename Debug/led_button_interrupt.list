
led_button_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fc8  08001fc8  00002fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001fd8  08001fd8  00002fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001fdc  08001fdc  00002fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08001fe0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001ff0  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001ff0  00003030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006f51  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001296  00000000  00000000  00009f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000658  00000000  00000000  0000b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000004a8  00000000  00000000  0000b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002dde4  00000000  00000000  0000bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000746c  00000000  00000000  00039b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012b2b8  00000000  00000000  00040f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0016c230  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001824  00000000  00000000  0016c274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  0016da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08001fb0 	.word	0x08001fb0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08001fb0 	.word	0x08001fb0

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002f0:	f000 f916 	bl	8000520 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fa6c 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f80a 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f87e 	bl	80003fc <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2180      	movs	r1, #128	@ 0x80
 8000304:	4801      	ldr	r0, [pc, #4]	@ (800030c <main+0x20>)
 8000306:	f000 fe2d 	bl	8000f64 <HAL_GPIO_WritePin>
 800030a:	e7f9      	b.n	8000300 <main+0x14>
 800030c:	58020400 	.word	0x58020400

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09c      	sub	sp, #112	@ 0x70
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800031a:	224c      	movs	r2, #76	@ 0x4c
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fe1a 	bl	8001f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2220      	movs	r2, #32
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fe14 	bl	8001f58 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xE003FFFF;
 8000330:	4b2f      	ldr	r3, [pc, #188]	@ (80003f0 <SystemClock_Config+0xe0>)
 8000332:	4a30      	ldr	r2, [pc, #192]	@ (80003f4 <SystemClock_Config+0xe4>)
 8000334:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000338:	2004      	movs	r0, #4
 800033a:	f000 fe51 	bl	8000fe0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <SystemClock_Config+0xe8>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a2c      	ldr	r2, [pc, #176]	@ (80003f8 <SystemClock_Config+0xe8>)
 8000348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <SystemClock_Config+0xe8>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800035a:	bf00      	nop
 800035c:	4b26      	ldr	r3, [pc, #152]	@ (80003f8 <SystemClock_Config+0xe8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000368:	d1f8      	bne.n	800035c <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036a:	2302      	movs	r3, #2
 800036c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800036e:	2301      	movs	r3, #1
 8000370:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000372:	2340      	movs	r3, #64	@ 0x40
 8000374:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037a:	2300      	movs	r3, #0
 800037c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800037e:	2304      	movs	r3, #4
 8000380:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000382:	2323      	movs	r3, #35	@ 0x23
 8000384:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000386:	2302      	movs	r3, #2
 8000388:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800038a:	2304      	movs	r3, #4
 800038c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800038e:	2302      	movs	r3, #2
 8000390:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000392:	230c      	movs	r3, #12
 8000394:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000396:	2300      	movs	r3, #0
 8000398:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fe76 	bl	8001094 <HAL_RCC_OscConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003ae:	f000 f8e3 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b2:	233f      	movs	r3, #63	@ 0x3f
 80003b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b6:	2303      	movs	r3, #3
 80003b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003c2:	2340      	movs	r3, #64	@ 0x40
 80003c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003c6:	2340      	movs	r3, #64	@ 0x40
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003d0:	2340      	movs	r3, #64	@ 0x40
 80003d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2106      	movs	r1, #6
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fa8d 	bl	80018f8 <HAL_RCC_ClockConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80003e4:	f000 f8c8 	bl	8000578 <Error_Handler>
  }
}
 80003e8:	bf00      	nop
 80003ea:	3770      	adds	r7, #112	@ 0x70
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	58024400 	.word	0x58024400
 80003f4:	e003ffff 	.word	0xe003ffff
 80003f8:	58024800 	.word	0x58024800

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	@ 0x28
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b3f      	ldr	r3, [pc, #252]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000414:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000418:	4a3d      	ldr	r2, [pc, #244]	@ (8000510 <MX_GPIO_Init+0x114>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000422:	4b3b      	ldr	r3, [pc, #236]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000424:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000430:	4b37      	ldr	r3, [pc, #220]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000432:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000436:	4a36      	ldr	r2, [pc, #216]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800043c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000440:	4b33      	ldr	r3, [pc, #204]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000442:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b30      	ldr	r3, [pc, #192]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000450:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000454:	4a2e      	ldr	r2, [pc, #184]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800045e:	4b2c      	ldr	r3, [pc, #176]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000460:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800046c:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_GPIO_Init+0x114>)
 800046e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000472:	4a27      	ldr	r2, [pc, #156]	@ (8000510 <MX_GPIO_Init+0x114>)
 8000474:	f043 0310 	orr.w	r3, r3, #16
 8000478:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800047c:	4b24      	ldr	r3, [pc, #144]	@ (8000510 <MX_GPIO_Init+0x114>)
 800047e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000482:	f003 0310 	and.w	r3, r3, #16
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000490:	4820      	ldr	r0, [pc, #128]	@ (8000514 <MX_GPIO_Init+0x118>)
 8000492:	f000 fd67 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2102      	movs	r1, #2
 800049a:	481f      	ldr	r0, [pc, #124]	@ (8000518 <MX_GPIO_Init+0x11c>)
 800049c:	f000 fd62 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4819      	ldr	r0, [pc, #100]	@ (800051c <MX_GPIO_Init+0x120>)
 80004b8:	f000 fba4 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80004bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	480f      	ldr	r0, [pc, #60]	@ (8000514 <MX_GPIO_Init+0x118>)
 80004d6:	f000 fb95 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004da:	2302      	movs	r3, #2
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2300      	movs	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	4809      	ldr	r0, [pc, #36]	@ (8000518 <MX_GPIO_Init+0x11c>)
 80004f2:	f000 fb87 	bl	8000c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	2028      	movs	r0, #40	@ 0x28
 80004fc:	f000 fad5 	bl	8000aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000500:	2028      	movs	r0, #40	@ 0x28
 8000502:	f000 faec 	bl	8000ade <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000506:	bf00      	nop
 8000508:	3728      	adds	r7, #40	@ 0x28
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	58024400 	.word	0x58024400
 8000514:	58020400 	.word	0x58020400
 8000518:	58021000 	.word	0x58021000
 800051c:	58020800 	.word	0x58020800

08000520 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000532:	f000 faef 	bl	8000b14 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000536:	2301      	movs	r3, #1
 8000538:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800053a:	2300      	movs	r3, #0
 800053c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000542:	231f      	movs	r3, #31
 8000544:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000546:	2387      	movs	r3, #135	@ 0x87
 8000548:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800054a:	2300      	movs	r3, #0
 800054c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800054e:	2300      	movs	r3, #0
 8000550:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000552:	2301      	movs	r3, #1
 8000554:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000562:	463b      	mov	r3, r7
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fb0d 	bl	8000b84 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800056a:	2004      	movs	r0, #4
 800056c:	f000 faea 	bl	8000b44 <HAL_MPU_Enable>

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_MspInit+0x30>)
 800058c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_MspInit+0x30>)
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_MspInit+0x30>)
 800059c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	58024400 	.word	0x58024400

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <NMI_Handler+0x4>

080005c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <MemManage_Handler+0x4>

080005d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <UsageFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060e:	f000 f951 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}

08000616 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800061a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800061e:	f000 fcba 	bl	8000f96 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800062c:	4b3e      	ldr	r3, [pc, #248]	@ (8000728 <SystemInit+0x100>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000632:	4a3d      	ldr	r2, [pc, #244]	@ (8000728 <SystemInit+0x100>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063c:	4b3b      	ldr	r3, [pc, #236]	@ (800072c <SystemInit+0x104>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f003 030f 	and.w	r3, r3, #15
 8000644:	2b02      	cmp	r3, #2
 8000646:	d807      	bhi.n	8000658 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000648:	4b38      	ldr	r3, [pc, #224]	@ (800072c <SystemInit+0x104>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f023 030f 	bic.w	r3, r3, #15
 8000650:	4a36      	ldr	r2, [pc, #216]	@ (800072c <SystemInit+0x104>)
 8000652:	f043 0303 	orr.w	r3, r3, #3
 8000656:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000658:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <SystemInit+0x108>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a34      	ldr	r2, [pc, #208]	@ (8000730 <SystemInit+0x108>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000664:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <SystemInit+0x108>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <SystemInit+0x108>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4930      	ldr	r1, [pc, #192]	@ (8000730 <SystemInit+0x108>)
 8000670:	4b30      	ldr	r3, [pc, #192]	@ (8000734 <SystemInit+0x10c>)
 8000672:	4013      	ands	r3, r2
 8000674:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <SystemInit+0x104>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 030c 	and.w	r3, r3, #12
 800067e:	2b00      	cmp	r3, #0
 8000680:	d007      	beq.n	8000692 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000682:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <SystemInit+0x104>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f023 030f 	bic.w	r3, r3, #15
 800068a:	4a28      	ldr	r2, [pc, #160]	@ (800072c <SystemInit+0x104>)
 800068c:	f043 0303 	orr.w	r3, r3, #3
 8000690:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemInit+0x108>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <SystemInit+0x108>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <SystemInit+0x108>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <SystemInit+0x108>)
 80006a6:	4a24      	ldr	r2, [pc, #144]	@ (8000738 <SystemInit+0x110>)
 80006a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006aa:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <SystemInit+0x108>)
 80006ac:	4a23      	ldr	r2, [pc, #140]	@ (800073c <SystemInit+0x114>)
 80006ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <SystemInit+0x108>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	@ (8000740 <SystemInit+0x118>)
 80006b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <SystemInit+0x108>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <SystemInit+0x108>)
 80006be:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <SystemInit+0x118>)
 80006c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <SystemInit+0x108>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <SystemInit+0x108>)
 80006ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x118>)
 80006cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <SystemInit+0x108>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <SystemInit+0x108>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <SystemInit+0x108>)
 80006da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <SystemInit+0x108>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <SystemInit+0x108>)
 80006e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80006ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d113      	bne.n	800071c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <SystemInit+0x108>)
 80006f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <SystemInit+0x108>)
 80006fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000700:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <SystemInit+0x11c>)
 8000706:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800070a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <SystemInit+0x108>)
 800070e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000712:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <SystemInit+0x108>)
 8000714:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000718:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	52002000 	.word	0x52002000
 8000730:	58024400 	.word	0x58024400
 8000734:	eaf6ed7f 	.word	0xeaf6ed7f
 8000738:	02020200 	.word	0x02020200
 800073c:	01ff0000 	.word	0x01ff0000
 8000740:	01010280 	.word	0x01010280
 8000744:	52004000 	.word	0x52004000

08000748 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <ExitRun0Mode+0x2c>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <ExitRun0Mode+0x2c>)
 8000752:	f023 0302 	bic.w	r3, r3, #2
 8000756:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000758:	bf00      	nop
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <ExitRun0Mode+0x2c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f9      	beq.n	800075a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	58024800 	.word	0x58024800

08000778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000778:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80007b4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800077c:	f7ff ffe4 	bl	8000748 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000780:	f7ff ff52 	bl	8000628 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	@ (80007bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	@ (80007c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f001 fbdd 	bl	8001f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ae:	f7ff fd9d 	bl	80002ec <main>
  bx  lr
 80007b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80007b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007bc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007c0:	08001fe0 	.word	0x08001fe0
  ldr r2, =_sbss
 80007c4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007c8:	24000030 	.word	0x24000030

080007cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d6:	2003      	movs	r0, #3
 80007d8:	f000 f95c 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80007dc:	f001 fa42 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 80007e0:	4602      	mov	r2, r0
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_Init+0x68>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	f003 030f 	and.w	r3, r3, #15
 80007ec:	4913      	ldr	r1, [pc, #76]	@ (800083c <HAL_Init+0x6c>)
 80007ee:	5ccb      	ldrb	r3, [r1, r3]
 80007f0:	f003 031f 	and.w	r3, r3, #31
 80007f4:	fa22 f303 	lsr.w	r3, r2, r3
 80007f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <HAL_Init+0x68>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <HAL_Init+0x6c>)
 8000804:	5cd3      	ldrb	r3, [r2, r3]
 8000806:	f003 031f 	and.w	r3, r3, #31
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	fa22 f303 	lsr.w	r3, r2, r3
 8000810:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <HAL_Init+0x70>)
 8000812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000814:	4a0b      	ldr	r2, [pc, #44]	@ (8000844 <HAL_Init+0x74>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f814 	bl	8000848 <HAL_InitTick>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e002      	b.n	8000830 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800082a:	f7ff feab 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	58024400 	.word	0x58024400
 800083c:	08001fc8 	.word	0x08001fc8
 8000840:	24000004 	.word	0x24000004
 8000844:	24000000 	.word	0x24000000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_InitTick+0x60>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e021      	b.n	80008a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_InitTick+0x64>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_InitTick+0x60>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f941 	bl	8000afa <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e00e      	b.n	80008a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d80a      	bhi.n	800089e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f90b 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4a06      	ldr	r2, [pc, #24]	@ (80008b0 <HAL_InitTick+0x68>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2400000c 	.word	0x2400000c
 80008ac:	24000000 	.word	0x24000000
 80008b0:	24000008 	.word	0x24000008

080008b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x20>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_IncTick+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_IncTick+0x24>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2400000c 	.word	0x2400000c
 80008d8:	2400002c 	.word	0x2400002c

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2400002c 	.word	0x2400002c

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <__NVIC_SetPriorityGrouping+0x40>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	4313      	orrs	r3, r2
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <__NVIC_SetPriorityGrouping+0x40>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	05fa0000 	.word	0x05fa0000

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4907      	ldr	r1, [pc, #28]	@ (8000990 <__NVIC_EnableIRQ+0x38>)
 8000972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	@ (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	@ 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8e 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff29 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff40 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff33 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa4 	bl	8000a50 <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b18:	f3bf 8f5f 	dmb	sy
}
 8000b1c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <HAL_MPU_Disable+0x28>)
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_MPU_Disable+0x28>)
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b28:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_MPU_Disable+0x2c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	e000ed90 	.word	0xe000ed90

08000b44 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <HAL_MPU_Enable+0x38>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_MPU_Enable+0x3c>)
 8000b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5a:	4a09      	ldr	r2, [pc, #36]	@ (8000b80 <HAL_MPU_Enable+0x3c>)
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b60:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b62:	f3bf 8f4f 	dsb	sy
}
 8000b66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b68:	f3bf 8f6f 	isb	sy
}
 8000b6c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed90 	.word	0xe000ed90
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	785a      	ldrb	r2, [r3, #1]
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_MPU_ConfigRegion+0x7c>)
 8000b92:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <HAL_MPU_ConfigRegion+0x7c>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <HAL_MPU_ConfigRegion+0x7c>)
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ba0:	4a17      	ldr	r2, [pc, #92]	@ (8000c00 <HAL_MPU_ConfigRegion+0x7c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7b1b      	ldrb	r3, [r3, #12]
 8000bac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7adb      	ldrb	r3, [r3, #11]
 8000bb2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7a9b      	ldrb	r3, [r3, #10]
 8000bba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7b5b      	ldrb	r3, [r3, #13]
 8000bc2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7b9b      	ldrb	r3, [r3, #14]
 8000bca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7bdb      	ldrb	r3, [r3, #15]
 8000bd2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7a5b      	ldrb	r3, [r3, #9]
 8000bda:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7a1b      	ldrb	r3, [r3, #8]
 8000be2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000be4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bf0:	6113      	str	r3, [r2, #16]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed90 	.word	0xe000ed90

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	@ 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c12:	4b89      	ldr	r3, [pc, #548]	@ (8000e38 <HAL_GPIO_Init+0x234>)
 8000c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c16:	e194      	b.n	8000f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 8186 	beq.w	8000f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <HAL_GPIO_Init+0x44>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	f003 0201 	and.w	r2, r3, #1
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d017      	beq.n	8000ce6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0203 	and.w	r2, r3, #3
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80e0 	beq.w	8000f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <HAL_GPIO_Init+0x238>)
 8000d7e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d82:	4a2e      	ldr	r2, [pc, #184]	@ (8000e3c <HAL_GPIO_Init+0x238>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e3c <HAL_GPIO_Init+0x238>)
 8000d8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9a:	4a29      	ldr	r2, [pc, #164]	@ (8000e40 <HAL_GPIO_Init+0x23c>)
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a20      	ldr	r2, [pc, #128]	@ (8000e44 <HAL_GPIO_Init+0x240>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d052      	beq.n	8000e6c <HAL_GPIO_Init+0x268>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <HAL_GPIO_Init+0x244>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d031      	beq.n	8000e32 <HAL_GPIO_Init+0x22e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_GPIO_Init+0x248>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d02b      	beq.n	8000e2e <HAL_GPIO_Init+0x22a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e50 <HAL_GPIO_Init+0x24c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d025      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e54 <HAL_GPIO_Init+0x250>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d01f      	beq.n	8000e26 <HAL_GPIO_Init+0x222>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <HAL_GPIO_Init+0x254>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d019      	beq.n	8000e22 <HAL_GPIO_Init+0x21e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e5c <HAL_GPIO_Init+0x258>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x21a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <HAL_GPIO_Init+0x25c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x216>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <HAL_GPIO_Init+0x260>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x212>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a17      	ldr	r2, [pc, #92]	@ (8000e68 <HAL_GPIO_Init+0x264>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x20e>
 8000e0e:	2309      	movs	r3, #9
 8000e10:	e02d      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e12:	230a      	movs	r3, #10
 8000e14:	e02b      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e16:	2308      	movs	r3, #8
 8000e18:	e029      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e027      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e025      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e023      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e021      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e01f      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e01d      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e01b      	b.n	8000e6e <HAL_GPIO_Init+0x26a>
 8000e36:	bf00      	nop
 8000e38:	58000080 	.word	0x58000080
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58000400 	.word	0x58000400
 8000e44:	58020000 	.word	0x58020000
 8000e48:	58020400 	.word	0x58020400
 8000e4c:	58020800 	.word	0x58020800
 8000e50:	58020c00 	.word	0x58020c00
 8000e54:	58021000 	.word	0x58021000
 8000e58:	58021400 	.word	0x58021400
 8000e5c:	58021800 	.word	0x58021800
 8000e60:	58021c00 	.word	0x58021c00
 8000e64:	58022000 	.word	0x58022000
 8000e68:	58022400 	.word	0x58022400
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7e:	4938      	ldr	r1, [pc, #224]	@ (8000f60 <HAL_GPIO_Init+0x35c>)
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f47f ae63 	bne.w	8000c18 <HAL_GPIO_Init+0x14>
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3724      	adds	r7, #36	@ 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	58000400 	.word	0x58000400

08000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
 8000f70:	4613      	mov	r3, r2
 8000f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f80:	e003      	b.n	8000f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	041a      	lsls	r2, r3, #16
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	619a      	str	r2, [r3, #24]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f804 	bl	8000fca <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fe8:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	d00a      	beq.n	800100a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d001      	beq.n	8001006 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e040      	b.n	8001088 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e03e      	b.n	8001088 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <HAL_PWREx_ConfigSupply+0xb0>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001012:	491f      	ldr	r1, [pc, #124]	@ (8001090 <HAL_PWREx_ConfigSupply+0xb0>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4313      	orrs	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800101a:	f7ff fc5f 	bl	80008dc <HAL_GetTick>
 800101e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001020:	e009      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001022:	f7ff fc5b 	bl	80008dc <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001030:	d901      	bls.n	8001036 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e028      	b.n	8001088 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <HAL_PWREx_ConfigSupply+0xb0>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800103e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001042:	d1ee      	bne.n	8001022 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b1e      	cmp	r3, #30
 8001048:	d008      	beq.n	800105c <HAL_PWREx_ConfigSupply+0x7c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b2e      	cmp	r3, #46	@ 0x2e
 800104e:	d005      	beq.n	800105c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b1d      	cmp	r3, #29
 8001054:	d002      	beq.n	800105c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d114      	bne.n	8001086 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800105c:	f7ff fc3e 	bl	80008dc <HAL_GetTick>
 8001060:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001062:	e009      	b.n	8001078 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001064:	f7ff fc3a 	bl	80008dc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001072:	d901      	bls.n	8001078 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e007      	b.n	8001088 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_PWREx_ConfigSupply+0xb0>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001084:	d1ee      	bne.n	8001064 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024800 	.word	0x58024800

08001094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	@ 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 bc1f 	b.w	80018e6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b3 	beq.w	800121c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b6:	4b95      	ldr	r3, [pc, #596]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010c0:	4b92      	ldr	r3, [pc, #584]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80010c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c8:	2b10      	cmp	r3, #16
 80010ca:	d007      	beq.n	80010dc <HAL_RCC_OscConfig+0x48>
 80010cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ce:	2b18      	cmp	r3, #24
 80010d0:	d112      	bne.n	80010f8 <HAL_RCC_OscConfig+0x64>
 80010d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d10d      	bne.n	80010f8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b8b      	ldr	r3, [pc, #556]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8098 	beq.w	800121a <HAL_RCC_OscConfig+0x186>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 8093 	bne.w	800121a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e3f6      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x7c>
 8001102:	4b82      	ldr	r3, [pc, #520]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a81      	ldr	r2, [pc, #516]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e058      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d112      	bne.n	800113e <HAL_RCC_OscConfig+0xaa>
 8001118:	4b7c      	ldr	r3, [pc, #496]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7b      	ldr	r2, [pc, #492]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b79      	ldr	r3, [pc, #484]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a78      	ldr	r2, [pc, #480]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800112a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b76      	ldr	r3, [pc, #472]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a75      	ldr	r2, [pc, #468]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e041      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001146:	d112      	bne.n	800116e <HAL_RCC_OscConfig+0xda>
 8001148:	4b70      	ldr	r3, [pc, #448]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a6f      	ldr	r2, [pc, #444]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800114e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b6d      	ldr	r3, [pc, #436]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a6c      	ldr	r2, [pc, #432]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800115a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b6a      	ldr	r3, [pc, #424]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a69      	ldr	r2, [pc, #420]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e029      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001176:	d112      	bne.n	800119e <HAL_RCC_OscConfig+0x10a>
 8001178:	4b64      	ldr	r3, [pc, #400]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a63      	ldr	r2, [pc, #396]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b61      	ldr	r3, [pc, #388]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a60      	ldr	r2, [pc, #384]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800118a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b5e      	ldr	r3, [pc, #376]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a5d      	ldr	r2, [pc, #372]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e011      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
 800119e:	4b5b      	ldr	r3, [pc, #364]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a5a      	ldr	r2, [pc, #360]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b58      	ldr	r3, [pc, #352]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a57      	ldr	r2, [pc, #348]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b55      	ldr	r3, [pc, #340]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a54      	ldr	r2, [pc, #336]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80011c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fb87 	bl	80008dc <HAL_GetTick>
 80011ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fb83 	bl	80008dc <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	@ 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e380      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011e4:	4b49      	ldr	r3, [pc, #292]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13e>
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb73 	bl	80008dc <HAL_GetTick>
 80011f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb6f 	bl	80008dc <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	@ 0x64
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e36c      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800120c:	4b3f      	ldr	r3, [pc, #252]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x166>
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 808c 	beq.w	8001342 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001232:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001234:	4b35      	ldr	r3, [pc, #212]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_RCC_OscConfig+0x1bc>
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	2b18      	cmp	r3, #24
 8001244:	d137      	bne.n	80012b6 <HAL_RCC_OscConfig+0x222>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d132      	bne.n	80012b6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	4b2e      	ldr	r3, [pc, #184]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_OscConfig+0x1d4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e33e      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 0219 	bic.w	r2, r3, #25
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4925      	ldr	r1, [pc, #148]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fb2f 	bl	80008dc <HAL_GetTick>
 800127e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fb2b 	bl	80008dc <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e328      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	4917      	ldr	r1, [pc, #92]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b4:	e045      	b.n	8001342 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d028      	beq.n	8001310 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0219 	bic.w	r2, r3, #25
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4910      	ldr	r1, [pc, #64]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb04 	bl	80008dc <HAL_GetTick>
 80012d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fb00 	bl	80008dc <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e2fd      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	4901      	ldr	r1, [pc, #4]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e01a      	b.n	8001342 <HAL_RCC_OscConfig+0x2ae>
 800130c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001310:	4b97      	ldr	r3, [pc, #604]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a96      	ldr	r2, [pc, #600]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fade 	bl	80008dc <HAL_GetTick>
 8001320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fada 	bl	80008dc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e2d7      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001336:	4b8e      	ldr	r3, [pc, #568]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06a      	beq.n	8001424 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001356:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001358:	4b85      	ldr	r3, [pc, #532]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d007      	beq.n	8001374 <HAL_RCC_OscConfig+0x2e0>
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b18      	cmp	r3, #24
 8001368:	d11b      	bne.n	80013a2 <HAL_RCC_OscConfig+0x30e>
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d116      	bne.n	80013a2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001374:	4b7e      	ldr	r3, [pc, #504]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x2f8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b80      	cmp	r3, #128	@ 0x80
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2ac      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800138c:	4b78      	ldr	r3, [pc, #480]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	4975      	ldr	r1, [pc, #468]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800139c:	4313      	orrs	r3, r2
 800139e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a0:	e040      	b.n	8001424 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d023      	beq.n	80013f2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013aa:	4b71      	ldr	r3, [pc, #452]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a70      	ldr	r2, [pc, #448]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fa91 	bl	80008dc <HAL_GetTick>
 80013ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80013be:	f7ff fa8d 	bl	80008dc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e28a      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013d0:	4b67      	ldr	r3, [pc, #412]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013dc:	4b64      	ldr	r3, [pc, #400]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	4961      	ldr	r1, [pc, #388]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
 80013f0:	e018      	b.n	8001424 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80013f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fa6d 	bl	80008dc <HAL_GetTick>
 8001402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001406:	f7ff fa69 	bl	80008dc <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e266      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001418:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d036      	beq.n	800149e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d019      	beq.n	800146c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001438:	4b4d      	ldr	r3, [pc, #308]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800143a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143c:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fa4a 	bl	80008dc <HAL_GetTick>
 8001448:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fa46 	bl	80008dc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e243      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800145e:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x3b8>
 800146a:	e018      	b.n	800149e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b40      	ldr	r3, [pc, #256]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800146e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001470:	4a3f      	ldr	r2, [pc, #252]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fa30 	bl	80008dc <HAL_GetTick>
 800147c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fa2c 	bl	80008dc <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e229      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d036      	beq.n	8001518 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d019      	beq.n	80014e6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80014b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014be:	f7ff fa0d 	bl	80008dc <HAL_GetTick>
 80014c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c6:	f7ff fa09 	bl	80008dc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e206      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014d8:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x432>
 80014e4:	e018      	b.n	8001518 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014f2:	f7ff f9f3 	bl	80008dc <HAL_GetTick>
 80014f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014fa:	f7ff f9ef 	bl	80008dc <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1ec      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80af 	beq.w	8001684 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_RCC_OscConfig+0x4e0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <HAL_RCC_OscConfig+0x4e0>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001532:	f7ff f9d3 	bl	80008dc <HAL_GetTick>
 8001536:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff f9cf 	bl	80008dc <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b64      	cmp	r3, #100	@ 0x64
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1cc      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_RCC_OscConfig+0x4e0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x4e4>
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	4a02      	ldr	r2, [pc, #8]	@ (8001570 <HAL_RCC_OscConfig+0x4dc>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	@ 0x70
 800156c:	e05b      	b.n	8001626 <HAL_RCC_OscConfig+0x592>
 800156e:	bf00      	nop
 8001570:	58024400 	.word	0x58024400
 8001574:	58024800 	.word	0x58024800
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d112      	bne.n	80015a6 <HAL_RCC_OscConfig+0x512>
 8001580:	4b9d      	ldr	r3, [pc, #628]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001584:	4a9c      	ldr	r2, [pc, #624]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	@ 0x70
 800158c:	4b9a      	ldr	r3, [pc, #616]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001590:	4a99      	ldr	r2, [pc, #612]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001596:	6713      	str	r3, [r2, #112]	@ 0x70
 8001598:	4b97      	ldr	r3, [pc, #604]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a96      	ldr	r2, [pc, #600]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	e03f      	b.n	8001626 <HAL_RCC_OscConfig+0x592>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_OscConfig+0x540>
 80015ae:	4b92      	ldr	r3, [pc, #584]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	4a91      	ldr	r2, [pc, #580]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ba:	4b8f      	ldr	r3, [pc, #572]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	4a8e      	ldr	r2, [pc, #568]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c6:	4b8c      	ldr	r3, [pc, #560]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ca:	4a8b      	ldr	r2, [pc, #556]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d2:	e028      	b.n	8001626 <HAL_RCC_OscConfig+0x592>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b85      	cmp	r3, #133	@ 0x85
 80015da:	d112      	bne.n	8001602 <HAL_RCC_OscConfig+0x56e>
 80015dc:	4b86      	ldr	r3, [pc, #536]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a85      	ldr	r2, [pc, #532]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e8:	4b83      	ldr	r3, [pc, #524]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a82      	ldr	r2, [pc, #520]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f4:	4b80      	ldr	r3, [pc, #512]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f8:	4a7f      	ldr	r2, [pc, #508]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001600:	e011      	b.n	8001626 <HAL_RCC_OscConfig+0x592>
 8001602:	4b7d      	ldr	r3, [pc, #500]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	4a7c      	ldr	r2, [pc, #496]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	@ 0x70
 800160e:	4b7a      	ldr	r3, [pc, #488]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001612:	4a79      	ldr	r2, [pc, #484]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6713      	str	r3, [r2, #112]	@ 0x70
 800161a:	4b77      	ldr	r3, [pc, #476]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	4a76      	ldr	r2, [pc, #472]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001624:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d015      	beq.n	800165a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162e:	f7ff f955 	bl	80008dc <HAL_GetTick>
 8001632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff f951 	bl	80008dc <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e14c      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800164c:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ee      	beq.n	8001636 <HAL_RCC_OscConfig+0x5a2>
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff f93f 	bl	80008dc <HAL_GetTick>
 800165e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff f93b 	bl	80008dc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e136      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001678:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ee      	bne.n	8001662 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 812b 	beq.w	80018e4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800168e:	4b5a      	ldr	r3, [pc, #360]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001696:	2b18      	cmp	r3, #24
 8001698:	f000 80bb 	beq.w	8001812 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 8095 	bne.w	80017d0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b54      	ldr	r3, [pc, #336]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a53      	ldr	r2, [pc, #332]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80016ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff f913 	bl	80008dc <HAL_GetTick>
 80016b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f90f 	bl	80008dc <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e10c      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016cc:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d8:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80016da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016dc:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <HAL_RCC_OscConfig+0x768>)
 80016de:	4013      	ands	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	430a      	orrs	r2, r1
 80016ec:	4942      	ldr	r1, [pc, #264]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	628b      	str	r3, [r1, #40]	@ 0x28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001700:	3b01      	subs	r3, #1
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	b29b      	uxth	r3, r3
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170c:	3b01      	subs	r3, #1
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171a:	3b01      	subs	r3, #1
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001722:	4935      	ldr	r1, [pc, #212]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001724:	4313      	orrs	r3, r2
 8001726:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001728:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172c:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001734:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001738:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <HAL_RCC_OscConfig+0x76c>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001740:	00d2      	lsls	r2, r2, #3
 8001742:	492d      	ldr	r1, [pc, #180]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001744:	4313      	orrs	r3, r2
 8001746:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001748:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174c:	f023 020c 	bic.w	r2, r3, #12
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	4928      	ldr	r1, [pc, #160]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001756:	4313      	orrs	r3, r2
 8001758:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800175a:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	f023 0202 	bic.w	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4924      	ldr	r1, [pc, #144]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001768:	4313      	orrs	r3, r2
 800176a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001770:	4a21      	ldr	r2, [pc, #132]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177c:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800177e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001784:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800178a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	4a18      	ldr	r2, [pc, #96]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a15      	ldr	r2, [pc, #84]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80017a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f898 	bl	80008dc <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f894 	bl	80008dc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e091      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x71c>
 80017ce:	e089      	b.n	80018e4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_RCC_OscConfig+0x764>)
 80017d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f87e 	bl	80008dc <HAL_GetTick>
 80017e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e2:	e00f      	b.n	8001804 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f87a 	bl	80008dc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d908      	bls.n	8001804 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e077      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
 80017f6:	bf00      	nop
 80017f8:	58024400 	.word	0x58024400
 80017fc:	fffffc0c 	.word	0xfffffc0c
 8001800:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e9      	bne.n	80017e4 <HAL_RCC_OscConfig+0x750>
 8001810:	e068      	b.n	80018e4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	2b01      	cmp	r3, #1
 8001824:	d031      	beq.n	800188a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d12a      	bne.n	800188a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d122      	bne.n	800188a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d11a      	bne.n	800188a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	0a5b      	lsrs	r3, r3, #9
 8001858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001860:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d111      	bne.n	800188a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001872:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d108      	bne.n	800188a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	0e1b      	lsrs	r3, r3, #24
 800187c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001884:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e02b      	b.n	80018e6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001898:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d01f      	beq.n	80018e4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b0:	f7ff f814 	bl	80008dc <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018b6:	bf00      	nop
 80018b8:	f7ff f810 	bl	80008dc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d0f9      	beq.n	80018b8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 80018c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x860>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018d0:	00d2      	lsls	r2, r2, #3
 80018d2:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_RCC_OscConfig+0x85c>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3730      	adds	r7, #48	@ 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58024400 	.word	0x58024400
 80018f4:	ffff0007 	.word	0xffff0007

080018f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e19c      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b8a      	ldr	r3, [pc, #552]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b87      	ldr	r3, [pc, #540]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 020f 	bic.w	r2, r3, #15
 8001922:	4985      	ldr	r1, [pc, #532]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b83      	ldr	r3, [pc, #524]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e184      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d010      	beq.n	800196a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001954:	429a      	cmp	r2, r3
 8001956:	d908      	bls.n	800196a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001958:	4b78      	ldr	r3, [pc, #480]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	4975      	ldr	r1, [pc, #468]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001966:	4313      	orrs	r3, r2
 8001968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	4b70      	ldr	r3, [pc, #448]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001982:	429a      	cmp	r2, r3
 8001984:	d908      	bls.n	8001998 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001986:	4b6d      	ldr	r3, [pc, #436]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	496a      	ldr	r1, [pc, #424]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001994:	4313      	orrs	r3, r2
 8001996:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d908      	bls.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019b4:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	495e      	ldr	r1, [pc, #376]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d010      	beq.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	4b59      	ldr	r3, [pc, #356]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019de:	429a      	cmp	r2, r3
 80019e0:	d908      	bls.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019e2:	4b56      	ldr	r3, [pc, #344]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4953      	ldr	r1, [pc, #332]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d010      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d908      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f023 020f 	bic.w	r2, r3, #15
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4947      	ldr	r1, [pc, #284]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d055      	beq.n	8001ada <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a2e:	4b43      	ldr	r3, [pc, #268]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4940      	ldr	r1, [pc, #256]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a48:	4b3c      	ldr	r3, [pc, #240]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d121      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0f6      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a60:	4b36      	ldr	r3, [pc, #216]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d115      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0ea      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a78:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0de      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0d6      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f023 0207 	bic.w	r2, r3, #7
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4925      	ldr	r1, [pc, #148]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aaa:	f7fe ff17 	bl	80008dc <HAL_GetTick>
 8001aae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab2:	f7fe ff13 	bl	80008dc <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0be      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d1eb      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d208      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f023 020f 	bic.w	r2, r3, #15
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	490e      	ldr	r1, [pc, #56]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d214      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4906      	ldr	r1, [pc, #24]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e086      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
 8001b38:	52002000 	.word	0x52002000
 8001b3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	4b3f      	ldr	r3, [pc, #252]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d208      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	4939      	ldr	r1, [pc, #228]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d010      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d208      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b8a:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	492e      	ldr	r1, [pc, #184]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d208      	bcs.n	8001bca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4922      	ldr	r1, [pc, #136]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d010      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d208      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4917      	ldr	r1, [pc, #92]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001bf8:	f000 f834 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	4912      	ldr	r1, [pc, #72]	@ (8001c54 <HAL_RCC_ClockConfig+0x35c>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_RCC_ClockConfig+0x35c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_RCC_ClockConfig+0x360>)
 8001c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_RCC_ClockConfig+0x364>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_RCC_ClockConfig+0x368>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fe04 	bl	8000848 <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
 8001c54:	08001fc8 	.word	0x08001fc8
 8001c58:	24000004 	.word	0x24000004
 8001c5c:	24000000 	.word	0x24000000
 8001c60:	24000008 	.word	0x24000008

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6a:	4bb3      	ldr	r3, [pc, #716]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c72:	2b18      	cmp	r3, #24
 8001c74:	f200 8155 	bhi.w	8001f22 <HAL_RCC_GetSysClockFreq+0x2be>
 8001c78:	a201      	add	r2, pc, #4	@ (adr r2, 8001c80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001ce5 	.word	0x08001ce5
 8001c84:	08001f23 	.word	0x08001f23
 8001c88:	08001f23 	.word	0x08001f23
 8001c8c:	08001f23 	.word	0x08001f23
 8001c90:	08001f23 	.word	0x08001f23
 8001c94:	08001f23 	.word	0x08001f23
 8001c98:	08001f23 	.word	0x08001f23
 8001c9c:	08001f23 	.word	0x08001f23
 8001ca0:	08001d0b 	.word	0x08001d0b
 8001ca4:	08001f23 	.word	0x08001f23
 8001ca8:	08001f23 	.word	0x08001f23
 8001cac:	08001f23 	.word	0x08001f23
 8001cb0:	08001f23 	.word	0x08001f23
 8001cb4:	08001f23 	.word	0x08001f23
 8001cb8:	08001f23 	.word	0x08001f23
 8001cbc:	08001f23 	.word	0x08001f23
 8001cc0:	08001d11 	.word	0x08001d11
 8001cc4:	08001f23 	.word	0x08001f23
 8001cc8:	08001f23 	.word	0x08001f23
 8001ccc:	08001f23 	.word	0x08001f23
 8001cd0:	08001f23 	.word	0x08001f23
 8001cd4:	08001f23 	.word	0x08001f23
 8001cd8:	08001f23 	.word	0x08001f23
 8001cdc:	08001f23 	.word	0x08001f23
 8001ce0:	08001d17 	.word	0x08001d17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ce4:	4b94      	ldr	r3, [pc, #592]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001cf0:	4b91      	ldr	r3, [pc, #580]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	4a90      	ldr	r2, [pc, #576]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d02:	e111      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d04:	4b8d      	ldr	r3, [pc, #564]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d06:	61bb      	str	r3, [r7, #24]
      break;
 8001d08:	e10e      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d0c:	61bb      	str	r3, [r7, #24]
      break;
 8001d0e:	e10b      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d10:	4b8c      	ldr	r3, [pc, #560]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d12:	61bb      	str	r3, [r7, #24]
      break;
 8001d14:	e108      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d20:	4b85      	ldr	r3, [pc, #532]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d2c:	4b82      	ldr	r3, [pc, #520]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d36:	4b80      	ldr	r3, [pc, #512]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80e1 	beq.w	8001f1c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f000 8083 	beq.w	8001e68 <HAL_RCC_GetSysClockFreq+0x204>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	f200 80a1 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x248>
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x114>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d056      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d76:	e099      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d78:	4b6f      	ldr	r3, [pc, #444]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d02d      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d84:	4b6c      	ldr	r3, [pc, #432]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dae:	4b62      	ldr	r3, [pc, #392]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dc2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001dde:	e087      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df2:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e22:	e065      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e36:	4b40      	ldr	r3, [pc, #256]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e66:	e043      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001f54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eaa:	e021      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ed2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	0a5b      	lsrs	r3, r3, #9
 8001ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001efa:	3301      	adds	r3, #1
 8001efc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f1a:	e005      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
      break;
 8001f20:	e002      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f24:	61bb      	str	r3, [r7, #24]
      break;
 8001f26:	bf00      	nop
  }

  return sysclockfreq;
 8001f28:	69bb      	ldr	r3, [r7, #24]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	03d09000 	.word	0x03d09000
 8001f40:	003d0900 	.word	0x003d0900
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	46000000 	.word	0x46000000
 8001f4c:	4c742400 	.word	0x4c742400
 8001f50:	4a742400 	.word	0x4a742400
 8001f54:	4af42400 	.word	0x4af42400

08001f58 <memset>:
 8001f58:	4402      	add	r2, r0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d100      	bne.n	8001f62 <memset+0xa>
 8001f60:	4770      	bx	lr
 8001f62:	f803 1b01 	strb.w	r1, [r3], #1
 8001f66:	e7f9      	b.n	8001f5c <memset+0x4>

08001f68 <__libc_init_array>:
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8001fa0 <__libc_init_array+0x38>)
 8001f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8001fa4 <__libc_init_array+0x3c>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	2600      	movs	r6, #0
 8001f74:	42a6      	cmp	r6, r4
 8001f76:	d109      	bne.n	8001f8c <__libc_init_array+0x24>
 8001f78:	4d0b      	ldr	r5, [pc, #44]	@ (8001fa8 <__libc_init_array+0x40>)
 8001f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8001fac <__libc_init_array+0x44>)
 8001f7c:	f000 f818 	bl	8001fb0 <_init>
 8001f80:	1b64      	subs	r4, r4, r5
 8001f82:	10a4      	asrs	r4, r4, #2
 8001f84:	2600      	movs	r6, #0
 8001f86:	42a6      	cmp	r6, r4
 8001f88:	d105      	bne.n	8001f96 <__libc_init_array+0x2e>
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f90:	4798      	blx	r3
 8001f92:	3601      	adds	r6, #1
 8001f94:	e7ee      	b.n	8001f74 <__libc_init_array+0xc>
 8001f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9a:	4798      	blx	r3
 8001f9c:	3601      	adds	r6, #1
 8001f9e:	e7f2      	b.n	8001f86 <__libc_init_array+0x1e>
 8001fa0:	08001fd8 	.word	0x08001fd8
 8001fa4:	08001fd8 	.word	0x08001fd8
 8001fa8:	08001fd8 	.word	0x08001fd8
 8001fac:	08001fdc 	.word	0x08001fdc

08001fb0 <_init>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr

08001fbc <_fini>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	bf00      	nop
 8001fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc2:	bc08      	pop	{r3}
 8001fc4:	469e      	mov	lr, r3
 8001fc6:	4770      	bx	lr
