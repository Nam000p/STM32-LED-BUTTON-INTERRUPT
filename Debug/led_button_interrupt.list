
led_button_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a80  08002a80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002a98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000bc  24000010  08002aa8  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000cc  08002aa8  000040cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d141  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b67  00000000  00000000  0001117f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c68  00000000  00000000  00012ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000098c  00000000  00000000  00013950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f4b3  00000000  00000000  000142dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000df95  00000000  00000000  0004378f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00137dc4  00000000  00000000  00051724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001894e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003374  00000000  00000000  0018952c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  0018c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08002a68 	.word	0x08002a68

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08002a68 	.word	0x08002a68

080002ec <turn_on_led1>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void turn_on_led1(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	LED1_H();
 80002f0:	2201      	movs	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4802      	ldr	r0, [pc, #8]	@ (8000300 <turn_on_led1+0x14>)
 80002f6:	f001 f821 	bl	800133c <HAL_GPIO_WritePin>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	58020400 	.word	0x58020400

08000304 <turn_on_led2>:
void turn_on_led2(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	LED2_H();
 8000308:	2201      	movs	r2, #1
 800030a:	2102      	movs	r1, #2
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <turn_on_led2+0x14>)
 800030e:	f001 f815 	bl	800133c <HAL_GPIO_WritePin>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	58021000 	.word	0x58021000

0800031c <turn_on_led3>:
void turn_on_led3(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	LED3_H();
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000326:	4802      	ldr	r0, [pc, #8]	@ (8000330 <turn_on_led3+0x14>)
 8000328:	f001 f808 	bl	800133c <HAL_GPIO_WritePin>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58020400 	.word	0x58020400

08000334 <turn_off_led1>:
void turn_off_led1(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	LED1_L();
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	4802      	ldr	r0, [pc, #8]	@ (8000348 <turn_off_led1+0x14>)
 800033e:	f000 fffd 	bl	800133c <HAL_GPIO_WritePin>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	58020400 	.word	0x58020400

0800034c <turn_off_led2>:
void turn_off_led2(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LED2_L();
 8000350:	2200      	movs	r2, #0
 8000352:	2102      	movs	r1, #2
 8000354:	4802      	ldr	r0, [pc, #8]	@ (8000360 <turn_off_led2+0x14>)
 8000356:	f000 fff1 	bl	800133c <HAL_GPIO_WritePin>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	58021000 	.word	0x58021000

08000364 <turn_off_led3>:
void turn_off_led3(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	LED3_L();
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800036e:	4802      	ldr	r0, [pc, #8]	@ (8000378 <turn_off_led3+0x14>)
 8000370:	f000 ffe4 	bl	800133c <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58020400 	.word	0x58020400

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000380:	f000 fa46 	bl	8000810 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 fbf8 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f81e 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f000 f902 	bl	8000594 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000390:	f000 f890 	bl	80004b4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000394:	f000 f8c6 	bl	8000524 <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  set_led_state(count);
 8000398:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <main+0x40>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f98b 	bl	80006b8 <set_led_state>
	  if (HAL_GPIO_ReadPin(B1_BUTTON_GPIO_PORT, B1_BUTTON_PIN) == GPIO_PIN_RESET)
 80003a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003a6:	4806      	ldr	r0, [pc, #24]	@ (80003c0 <main+0x44>)
 80003a8:	f000 ffb0 	bl	800130c <HAL_GPIO_ReadPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1f2      	bne.n	8000398 <main+0x1c>
	  {
		  HAL_TIM_Base_Start_IT(&htim7);
 80003b2:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <main+0x48>)
 80003b4:	f002 f80a 	bl	80023cc <HAL_TIM_Base_Start_IT>
	  set_led_state(count);
 80003b8:	e7ee      	b.n	8000398 <main+0x1c>
 80003ba:	bf00      	nop
 80003bc:	240000c4 	.word	0x240000c4
 80003c0:	58020800 	.word	0x58020800
 80003c4:	24000078 	.word	0x24000078

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b09c      	sub	sp, #112	@ 0x70
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003d2:	224c      	movs	r2, #76	@ 0x4c
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fb1a 	bl	8002a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2220      	movs	r2, #32
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 fb14 	bl	8002a10 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xE003FFFF;
 80003e8:	4b2f      	ldr	r3, [pc, #188]	@ (80004a8 <SystemClock_Config+0xe0>)
 80003ea:	4a30      	ldr	r2, [pc, #192]	@ (80004ac <SystemClock_Config+0xe4>)
 80003ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003f0:	2004      	movs	r0, #4
 80003f2:	f000 ffd7 	bl	80013a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003f6:	2300      	movs	r3, #0
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	4b2d      	ldr	r3, [pc, #180]	@ (80004b0 <SystemClock_Config+0xe8>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a2c      	ldr	r2, [pc, #176]	@ (80004b0 <SystemClock_Config+0xe8>)
 8000400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b2a      	ldr	r3, [pc, #168]	@ (80004b0 <SystemClock_Config+0xe8>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000412:	bf00      	nop
 8000414:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <SystemClock_Config+0xe8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800041c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000420:	d1f8      	bne.n	8000414 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	2302      	movs	r3, #2
 8000424:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000426:	2301      	movs	r3, #1
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800042a:	2340      	movs	r3, #64	@ 0x40
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000432:	2300      	movs	r3, #0
 8000434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000436:	2304      	movs	r3, #4
 8000438:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800043a:	2323      	movs	r3, #35	@ 0x23
 800043c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800043e:	2302      	movs	r3, #2
 8000440:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000442:	2304      	movs	r3, #4
 8000444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800044a:	230c      	movs	r3, #12
 800044c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044e:	2300      	movs	r3, #0
 8000450:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fffc 	bl	8001458 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000466:	f000 f9ff 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	233f      	movs	r3, #63	@ 0x3f
 800046c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2303      	movs	r3, #3
 8000470:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800047a:	2340      	movs	r3, #64	@ 0x40
 800047c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800047e:	2340      	movs	r3, #64	@ 0x40
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000486:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000488:	2340      	movs	r3, #64	@ 0x40
 800048a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2106      	movs	r1, #6
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fc13 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800049c:	f000 f9e4 	bl	8000868 <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3770      	adds	r7, #112	@ 0x70
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	58024400 	.word	0x58024400
 80004ac:	e003ffff 	.word	0xe003ffff
 80004b0:	58024800 	.word	0x58024800

080004b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004c4:	4b15      	ldr	r3, [pc, #84]	@ (800051c <MX_TIM6_Init+0x68>)
 80004c6:	4a16      	ldr	r2, [pc, #88]	@ (8000520 <MX_TIM6_Init+0x6c>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2799;
 80004ca:	4b14      	ldr	r3, [pc, #80]	@ (800051c <MX_TIM6_Init+0x68>)
 80004cc:	f640 22ef 	movw	r2, #2799	@ 0xaef
 80004d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <MX_TIM6_Init+0x68>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80004d8:	4b10      	ldr	r3, [pc, #64]	@ (800051c <MX_TIM6_Init+0x68>)
 80004da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_TIM6_Init+0x68>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004e6:	480d      	ldr	r0, [pc, #52]	@ (800051c <MX_TIM6_Init+0x68>)
 80004e8:	f001 ff18 	bl	800231c <HAL_TIM_Base_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80004f2:	f000 f9b9 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	@ (800051c <MX_TIM6_Init+0x68>)
 8000504:	f002 f9d8 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800050e:	f000 f9ab 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	2400002c 	.word	0x2400002c
 8000520:	40001000 	.word	0x40001000

08000524 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <MX_TIM7_Init+0x68>)
 8000536:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <MX_TIM7_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41999;
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_TIM7_Init+0x68>)
 800053c:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000540:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000542:	4b12      	ldr	r3, [pc, #72]	@ (800058c <MX_TIM7_Init+0x68>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000;
 8000548:	4b10      	ldr	r3, [pc, #64]	@ (800058c <MX_TIM7_Init+0x68>)
 800054a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800054e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_TIM7_Init+0x68>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000556:	480d      	ldr	r0, [pc, #52]	@ (800058c <MX_TIM7_Init+0x68>)
 8000558:	f001 fee0 	bl	800231c <HAL_TIM_Base_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000562:	f000 f981 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	@ (800058c <MX_TIM7_Init+0x68>)
 8000574:	f002 f9a0 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800057e:	f000 f973 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	24000078 	.word	0x24000078
 8000590:	40001400 	.word	0x40001400

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	@ 0x28
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b3f      	ldr	r3, [pc, #252]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005b0:	4a3d      	ldr	r2, [pc, #244]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005ba:	4b3b      	ldr	r3, [pc, #236]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c8:	4b37      	ldr	r3, [pc, #220]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005ce:	4a36      	ldr	r2, [pc, #216]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005d8:	4b33      	ldr	r3, [pc, #204]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005ec:	4a2e      	ldr	r2, [pc, #184]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f6:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <MX_GPIO_Init+0x114>)
 80005f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_GPIO_Init+0x114>)
 8000606:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800060a:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <MX_GPIO_Init+0x114>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <MX_GPIO_Init+0x114>)
 8000616:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800061a:	f003 0310 	and.w	r3, r3, #16
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000628:	4820      	ldr	r0, [pc, #128]	@ (80006ac <MX_GPIO_Init+0x118>)
 800062a:	f000 fe87 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 8000634:	f000 fe82 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800063e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x120>)
 8000650:	f000 fcac 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000654:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480f      	ldr	r0, [pc, #60]	@ (80006ac <MX_GPIO_Init+0x118>)
 800066e:	f000 fc9d 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000672:	2302      	movs	r3, #2
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 800068a:	f000 fc8f 	bl	8000fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2028      	movs	r0, #40	@ 0x28
 8000694:	f000 fbdd 	bl	8000e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000698:	2028      	movs	r0, #40	@ 0x28
 800069a:	f000 fbf4 	bl	8000e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	58024400 	.word	0x58024400
 80006ac:	58020400 	.word	0x58020400
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020800 	.word	0x58020800

080006b8 <set_led_state>:

/* USER CODE BEGIN 4 */
void set_led_state(uint8_t state)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    switch(state)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d014      	beq.n	80006f2 <set_led_state+0x3a>
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	dc19      	bgt.n	8000700 <set_led_state+0x48>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <set_led_state+0x1e>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d007      	beq.n	80006e4 <set_led_state+0x2c>
 80006d4:	e014      	b.n	8000700 <set_led_state+0x48>
    {
        case 0: // LED1 on
        	turn_on_led1();
 80006d6:	f7ff fe09 	bl	80002ec <turn_on_led1>
        	turn_off_led2();
 80006da:	f7ff fe37 	bl	800034c <turn_off_led2>
        	turn_off_led3();
 80006de:	f7ff fe41 	bl	8000364 <turn_off_led3>
            break;
 80006e2:	e014      	b.n	800070e <set_led_state+0x56>
        case 1: // LED2 on
            turn_off_led1();
 80006e4:	f7ff fe26 	bl	8000334 <turn_off_led1>
            turn_on_led2();
 80006e8:	f7ff fe0c 	bl	8000304 <turn_on_led2>
            turn_off_led3();
 80006ec:	f7ff fe3a 	bl	8000364 <turn_off_led3>
            break;
 80006f0:	e00d      	b.n	800070e <set_led_state+0x56>
        case 2: // LED3 on
        	turn_off_led1();
 80006f2:	f7ff fe1f 	bl	8000334 <turn_off_led1>
        	turn_off_led2();
 80006f6:	f7ff fe29 	bl	800034c <turn_off_led2>
        	turn_on_led3();
 80006fa:	f7ff fe0f 	bl	800031c <turn_on_led3>
            break;
 80006fe:	e006      	b.n	800070e <set_led_state+0x56>
        default: // All LED off
        	turn_off_led1();
 8000700:	f7ff fe18 	bl	8000334 <turn_off_led1>
        	turn_off_led2();
 8000704:	f7ff fe22 	bl	800034c <turn_off_led2>
        	turn_off_led3();
 8000708:	f7ff fe2c 	bl	8000364 <turn_off_led3>
        	break;
 800070c:	bf00      	nop
    }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <HAL_GPIO_EXTI_Callback>:
    }
}
#else
volatile uint8_t count_click = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == B1_BUTTON_PIN) && (state == 0))
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000728:	d119      	bne.n	800075e <HAL_GPIO_EXTI_Callback+0x46>
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_GPIO_EXTI_Callback+0x54>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d115      	bne.n	800075e <HAL_GPIO_EXTI_Callback+0x46>
	{
		count_click++;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x58>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x58>)
 800073e:	701a      	strb	r2, [r3, #0]
		if (count_click == 3)
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b03      	cmp	r3, #3
 8000748:	d102      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x38>
			count_click = 1;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x58>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 8000750:	4808      	ldr	r0, [pc, #32]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000752:	f001 fe3b 	bl	80023cc <HAL_TIM_Base_Start_IT>
		state = 1;
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_GPIO_EXTI_Callback+0x54>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e001      	b.n	8000762 <HAL_GPIO_EXTI_Callback+0x4a>
	}
	else
	{
		__NOP();
 800075e:	bf00      	nop
	}
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	240000c5 	.word	0x240000c5
 8000770:	240000c6 	.word	0x240000c6
 8000774:	2400002c 	.word	0x2400002c

08000778 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d121      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		if(HAL_GPIO_ReadPin(B1_BUTTON_GPIO_PORT, B1_BUTTON_PIN) == GPIO_PIN_RESET)
 800078a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078e:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000790:	f000 fdbc 	bl	800130c <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d119      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			if (count_click == 2)
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d10e      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x4a>
				count = (count + 1) % 3;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007ac:	fb83 3102 	smull	r3, r1, r3, r2
 80007b0:	17d3      	asrs	r3, r2, #31
 80007b2:	1ac9      	subs	r1, r1, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	440b      	add	r3, r1
 80007ba:	1ad1      	subs	r1, r2, r3
 80007bc:	b2ca      	uxtb	r2, r1
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007c0:	701a      	strb	r2, [r3, #0]
			state = 0;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 80007c8:	480e      	ldr	r0, [pc, #56]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80007ca:	f001 fe77 	bl	80024bc <HAL_TIM_Base_Stop_IT>
		}
	}
	if (htim->Instance == TIM7)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d105      	bne.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		count = -1;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007da:	22ff      	movs	r2, #255	@ 0xff
 80007dc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7);
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007e0:	f001 fe6c 	bl	80024bc <HAL_TIM_Base_Stop_IT>
	}
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40001000 	.word	0x40001000
 80007f0:	58020800 	.word	0x58020800
 80007f4:	240000c6 	.word	0x240000c6
 80007f8:	240000c4 	.word	0x240000c4
 80007fc:	55555556 	.word	0x55555556
 8000800:	240000c5 	.word	0x240000c5
 8000804:	2400002c 	.word	0x2400002c
 8000808:	40001400 	.word	0x40001400
 800080c:	24000078 	.word	0x24000078

08000810 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000822:	f000 fb4b 	bl	8000ebc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800082a:	2300      	movs	r3, #0
 800082c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000832:	231f      	movs	r3, #31
 8000834:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000836:	2387      	movs	r3, #135	@ 0x87
 8000838:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800083a:	2300      	movs	r3, #0
 800083c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800083e:	2300      	movs	r3, #0
 8000840:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000842:	2301      	movs	r3, #1
 8000844:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000846:	2301      	movs	r3, #1
 8000848:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	463b      	mov	r3, r7
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fb69 	bl	8000f2c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800085a:	2004      	movs	r0, #4
 800085c:	f000 fb46 	bl	8000eec <HAL_MPU_Enable>

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_MspInit+0x30>)
 800087c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x30>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x30>)
 800088c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	58024400 	.word	0x58024400

080008a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d117      	bne.n	80008ea <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 80008bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 80008cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2036      	movs	r0, #54	@ 0x36
 80008de:	f000 fab8 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008e2:	2036      	movs	r0, #54	@ 0x36
 80008e4:	f000 facf 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 80008e8:	e01b      	b.n	8000922 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a11      	ldr	r2, [pc, #68]	@ (8000934 <HAL_TIM_Base_MspInit+0x8c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d116      	bne.n	8000922 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 80008f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 8000906:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2037      	movs	r0, #55	@ 0x37
 8000918:	f000 fa9b 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800091c:	2037      	movs	r0, #55	@ 0x37
 800091e:	f000 fab2 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40001000 	.word	0x40001000
 8000930:	58024400 	.word	0x58024400
 8000934:	40001400 	.word	0x40001400

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 f965 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}

08000996 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800099a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800099e:	f000 fce6 	bl	800136e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <TIM6_DAC_IRQHandler+0x10>)
 80009ae:	f001 fdb4 	bl	800251a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2400002c 	.word	0x2400002c

080009bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <TIM7_IRQHandler+0x10>)
 80009c2:	f001 fdaa 	bl	800251a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	24000078 	.word	0x24000078

080009d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <SystemInit+0x100>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a3d      	ldr	r2, [pc, #244]	@ (8000ad0 <SystemInit+0x100>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009e4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad4 <SystemInit+0x104>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 030f 	and.w	r3, r3, #15
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d807      	bhi.n	8000a00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009f0:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <SystemInit+0x104>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 030f 	bic.w	r3, r3, #15
 80009f8:	4a36      	ldr	r2, [pc, #216]	@ (8000ad4 <SystemInit+0x104>)
 80009fa:	f043 0303 	orr.w	r3, r3, #3
 80009fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a00:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <SystemInit+0x108>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a34      	ldr	r2, [pc, #208]	@ (8000ad8 <SystemInit+0x108>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <SystemInit+0x108>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <SystemInit+0x108>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4930      	ldr	r1, [pc, #192]	@ (8000ad8 <SystemInit+0x108>)
 8000a18:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <SystemInit+0x10c>)
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <SystemInit+0x104>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <SystemInit+0x104>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f023 030f 	bic.w	r3, r3, #15
 8000a32:	4a28      	ldr	r2, [pc, #160]	@ (8000ad4 <SystemInit+0x104>)
 8000a34:	f043 0303 	orr.w	r3, r3, #3
 8000a38:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <SystemInit+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <SystemInit+0x108>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <SystemInit+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <SystemInit+0x108>)
 8000a4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ae0 <SystemInit+0x110>)
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <SystemInit+0x108>)
 8000a54:	4a23      	ldr	r2, [pc, #140]	@ (8000ae4 <SystemInit+0x114>)
 8000a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <SystemInit+0x108>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <SystemInit+0x118>)
 8000a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <SystemInit+0x108>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <SystemInit+0x108>)
 8000a66:	4a20      	ldr	r2, [pc, #128]	@ (8000ae8 <SystemInit+0x118>)
 8000a68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <SystemInit+0x108>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <SystemInit+0x108>)
 8000a72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae8 <SystemInit+0x118>)
 8000a74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <SystemInit+0x108>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <SystemInit+0x108>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <SystemInit+0x108>)
 8000a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <SystemInit+0x108>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <SystemInit+0x108>)
 8000a90:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d113      	bne.n	8000ac4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <SystemInit+0x108>)
 8000a9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <SystemInit+0x108>)
 8000aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aa8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <SystemInit+0x11c>)
 8000aae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ab2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <SystemInit+0x108>)
 8000ab6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000aba:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <SystemInit+0x108>)
 8000abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ac0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	52002000 	.word	0x52002000
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae0:	02020200 	.word	0x02020200
 8000ae4:	01ff0000 	.word	0x01ff0000
 8000ae8:	01010280 	.word	0x01010280
 8000aec:	52004000 	.word	0x52004000

08000af0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <ExitRun0Mode+0x2c>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <ExitRun0Mode+0x2c>)
 8000afa:	f023 0302 	bic.w	r3, r3, #2
 8000afe:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000b00:	bf00      	nop
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <ExitRun0Mode+0x2c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f9      	beq.n	8000b02 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	58024800 	.word	0x58024800

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000b5c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b24:	f7ff ffe4 	bl	8000af0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b28:	f7ff ff52 	bl	80009d0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	@ (8000b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f001 ff65 	bl	8002a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fc11 	bl	800037c <main>
  bx  lr
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000b60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b64:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b68:	08002a98 	.word	0x08002a98
  ldr r2, =_sbss
 8000b6c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b70:	240000cc 	.word	0x240000cc

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f000 f95c 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000b84:	f001 fa50 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_Init+0x68>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	4913      	ldr	r1, [pc, #76]	@ (8000be4 <HAL_Init+0x6c>)
 8000b96:	5ccb      	ldrb	r3, [r1, r3]
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <HAL_Init+0x68>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <HAL_Init+0x6c>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000be8 <HAL_Init+0x70>)
 8000bba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000bec <HAL_Init+0x74>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f814 	bl	8000bf0 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e002      	b.n	8000bd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd2:	f7ff fe4f 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024400 	.word	0x58024400
 8000be4:	08002a80 	.word	0x08002a80
 8000be8:	24000004 	.word	0x24000004
 8000bec:	24000000 	.word	0x24000000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_InitTick+0x60>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e021      	b.n	8000c48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <HAL_InitTick+0x64>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_InitTick+0x60>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f941 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f90b 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <HAL_InitTick+0x68>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2400000c 	.word	0x2400000c
 8000c54:	24000000 	.word	0x24000000
 8000c58:	24000008 	.word	0x24000008

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2400000c 	.word	0x2400000c
 8000c80:	240000c8 	.word	0x240000c8

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	240000c8 	.word	0x240000c8

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x40>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x40>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	05fa0000 	.word	0x05fa0000

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff29 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff40 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff90 	bl	8000d90 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5f 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff33 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa4 	bl	8000df8 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ec0:	f3bf 8f5f 	dmb	sy
}
 8000ec4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <HAL_MPU_Disable+0x28>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_MPU_Disable+0x28>)
 8000ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_MPU_Disable+0x2c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	e000ed90 	.word	0xe000ed90

08000eec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f24 <HAL_MPU_Enable+0x38>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_MPU_Enable+0x3c>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f02:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <HAL_MPU_Enable+0x3c>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f08:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f0a:	f3bf 8f4f 	dsb	sy
}
 8000f0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f10:	f3bf 8f6f 	isb	sy
}
 8000f14:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed90 	.word	0xe000ed90
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785a      	ldrb	r2, [r3, #1]
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f3a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f42:	f023 0301 	bic.w	r3, r3, #1
 8000f46:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000f48:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b1b      	ldrb	r3, [r3, #12]
 8000f54:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7adb      	ldrb	r3, [r3, #11]
 8000f5a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a9b      	ldrb	r3, [r3, #10]
 8000f62:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7b5b      	ldrb	r3, [r3, #13]
 8000f6a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7b9b      	ldrb	r3, [r3, #14]
 8000f72:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7bdb      	ldrb	r3, [r3, #15]
 8000f7a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7a5b      	ldrb	r3, [r3, #9]
 8000f82:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7a1b      	ldrb	r3, [r3, #8]
 8000f8a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f8c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f96:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f98:	6113      	str	r3, [r2, #16]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed90 	.word	0xe000ed90

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fba:	4b89      	ldr	r3, [pc, #548]	@ (80011e0 <HAL_GPIO_Init+0x234>)
 8000fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fbe:	e194      	b.n	80012ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8186 	beq.w	80012e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d005      	beq.n	8000ff0 <HAL_GPIO_Init+0x44>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 0201 	and.w	r2, r3, #1
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d017      	beq.n	800108e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d123      	bne.n	80010e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	69b9      	ldr	r1, [r7, #24]
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0203 	and.w	r2, r3, #3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 80e0 	beq.w	80012e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <HAL_GPIO_Init+0x238>)
 8001126:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800112a:	4a2e      	ldr	r2, [pc, #184]	@ (80011e4 <HAL_GPIO_Init+0x238>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HAL_GPIO_Init+0x238>)
 8001136:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a29      	ldr	r2, [pc, #164]	@ (80011e8 <HAL_GPIO_Init+0x23c>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a20      	ldr	r2, [pc, #128]	@ (80011ec <HAL_GPIO_Init+0x240>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d052      	beq.n	8001214 <HAL_GPIO_Init+0x268>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1f      	ldr	r2, [pc, #124]	@ (80011f0 <HAL_GPIO_Init+0x244>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d031      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_GPIO_Init+0x248>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x22a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <HAL_GPIO_Init+0x24c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <HAL_GPIO_Init+0x250>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x222>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <HAL_GPIO_Init+0x254>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x21e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a1a      	ldr	r2, [pc, #104]	@ (8001204 <HAL_GPIO_Init+0x258>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x21a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <HAL_GPIO_Init+0x25c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x216>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a18      	ldr	r2, [pc, #96]	@ (800120c <HAL_GPIO_Init+0x260>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x212>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_GPIO_Init+0x264>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x20e>
 80011b6:	2309      	movs	r3, #9
 80011b8:	e02d      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011ba:	230a      	movs	r3, #10
 80011bc:	e02b      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011be:	2308      	movs	r3, #8
 80011c0:	e029      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e027      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e025      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e023      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e021      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e01f      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e01d      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e01b      	b.n	8001216 <HAL_GPIO_Init+0x26a>
 80011de:	bf00      	nop
 80011e0:	58000080 	.word	0x58000080
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58000400 	.word	0x58000400
 80011ec:	58020000 	.word	0x58020000
 80011f0:	58020400 	.word	0x58020400
 80011f4:	58020800 	.word	0x58020800
 80011f8:	58020c00 	.word	0x58020c00
 80011fc:	58021000 	.word	0x58021000
 8001200:	58021400 	.word	0x58021400
 8001204:	58021800 	.word	0x58021800
 8001208:	58021c00 	.word	0x58021c00
 800120c:	58022000 	.word	0x58022000
 8001210:	58022400 	.word	0x58022400
 8001214:	2300      	movs	r3, #0
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001226:	4938      	ldr	r1, [pc, #224]	@ (8001308 <HAL_GPIO_Init+0x35c>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800125a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001288:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f47f ae63 	bne.w	8000fc0 <HAL_GPIO_Init+0x14>
  }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3724      	adds	r7, #36	@ 0x24
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	58000400 	.word	0x58000400

0800130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f9bf 	bl	8000718 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d00a      	beq.n	80013ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013b8:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d001      	beq.n	80013ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e040      	b.n	800144c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e03e      	b.n	800144c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_PWREx_ConfigSupply+0xb0>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80013d6:	491f      	ldr	r1, [pc, #124]	@ (8001454 <HAL_PWREx_ConfigSupply+0xb0>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013de:	f7ff fc51 	bl	8000c84 <HAL_GetTick>
 80013e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013e4:	e009      	b.n	80013fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013e6:	f7ff fc4d 	bl	8000c84 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013f4:	d901      	bls.n	80013fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e028      	b.n	800144c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_PWREx_ConfigSupply+0xb0>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001406:	d1ee      	bne.n	80013e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b1e      	cmp	r3, #30
 800140c:	d008      	beq.n	8001420 <HAL_PWREx_ConfigSupply+0x7c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b2e      	cmp	r3, #46	@ 0x2e
 8001412:	d005      	beq.n	8001420 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b1d      	cmp	r3, #29
 8001418:	d002      	beq.n	8001420 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b2d      	cmp	r3, #45	@ 0x2d
 800141e:	d114      	bne.n	800144a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001420:	f7ff fc30 	bl	8000c84 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001426:	e009      	b.n	800143c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001428:	f7ff fc2c 	bl	8000c84 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001436:	d901      	bls.n	800143c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e007      	b.n	800144c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_PWREx_ConfigSupply+0xb0>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001448:	d1ee      	bne.n	8001428 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024800 	.word	0x58024800

08001458 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	f000 bc1f 	b.w	8001caa <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80b3 	beq.w	80015e0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147a:	4b95      	ldr	r3, [pc, #596]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001484:	4b92      	ldr	r3, [pc, #584]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800148a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148c:	2b10      	cmp	r3, #16
 800148e:	d007      	beq.n	80014a0 <HAL_RCC_OscConfig+0x48>
 8001490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001492:	2b18      	cmp	r3, #24
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x64>
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d10d      	bne.n	80014bc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4b8b      	ldr	r3, [pc, #556]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8098 	beq.w	80015de <HAL_RCC_OscConfig+0x186>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 8093 	bne.w	80015de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e3f6      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x7c>
 80014c6:	4b82      	ldr	r3, [pc, #520]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a81      	ldr	r2, [pc, #516]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e058      	b.n	8001586 <HAL_RCC_OscConfig+0x12e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0xaa>
 80014dc:	4b7c      	ldr	r3, [pc, #496]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a7b      	ldr	r2, [pc, #492]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b79      	ldr	r3, [pc, #484]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a78      	ldr	r2, [pc, #480]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014ee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b76      	ldr	r3, [pc, #472]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a75      	ldr	r2, [pc, #468]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e041      	b.n	8001586 <HAL_RCC_OscConfig+0x12e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800150a:	d112      	bne.n	8001532 <HAL_RCC_OscConfig+0xda>
 800150c:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6f      	ldr	r2, [pc, #444]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b6d      	ldr	r3, [pc, #436]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6c      	ldr	r2, [pc, #432]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800151e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b6a      	ldr	r3, [pc, #424]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a69      	ldr	r2, [pc, #420]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e029      	b.n	8001586 <HAL_RCC_OscConfig+0x12e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x10a>
 800153c:	4b64      	ldr	r3, [pc, #400]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a63      	ldr	r2, [pc, #396]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b61      	ldr	r3, [pc, #388]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a60      	ldr	r2, [pc, #384]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800154e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b5e      	ldr	r3, [pc, #376]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a5d      	ldr	r2, [pc, #372]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800155a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x12e>
 8001562:	4b5b      	ldr	r3, [pc, #364]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5a      	ldr	r2, [pc, #360]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b58      	ldr	r3, [pc, #352]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a57      	ldr	r2, [pc, #348]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b55      	ldr	r3, [pc, #340]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a54      	ldr	r2, [pc, #336]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001580:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001584:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d013      	beq.n	80015b6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fb79 	bl	8000c84 <HAL_GetTick>
 8001592:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001596:	f7ff fb75 	bl	8000c84 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b64      	cmp	r3, #100	@ 0x64
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e380      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a8:	4b49      	ldr	r3, [pc, #292]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x13e>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb65 	bl	8000c84 <HAL_GetTick>
 80015ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015be:	f7ff fb61 	bl	8000c84 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	@ 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e36c      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015d0:	4b3f      	ldr	r3, [pc, #252]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x166>
 80015dc:	e000      	b.n	80015e0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 808c 	beq.w	8001706 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f8:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80015fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_RCC_OscConfig+0x1bc>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	2b18      	cmp	r3, #24
 8001608:	d137      	bne.n	800167a <HAL_RCC_OscConfig+0x222>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d132      	bne.n	800167a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001614:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_OscConfig+0x1d4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e33e      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 0219 	bic.w	r2, r3, #25
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4925      	ldr	r1, [pc, #148]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fb21 	bl	8000c84 <HAL_GetTick>
 8001642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fb1d 	bl	8000c84 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e328      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	4917      	ldr	r1, [pc, #92]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	e045      	b.n	8001706 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d028      	beq.n	80016d4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 0219 	bic.w	r2, r3, #25
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4910      	ldr	r1, [pc, #64]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff faf6 	bl	8000c84 <HAL_GetTick>
 8001698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff faf2 	bl	8000c84 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e2fd      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	4901      	ldr	r1, [pc, #4]	@ (80016d0 <HAL_RCC_OscConfig+0x278>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
 80016ce:	e01a      	b.n	8001706 <HAL_RCC_OscConfig+0x2ae>
 80016d0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d4:	4b97      	ldr	r3, [pc, #604]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a96      	ldr	r2, [pc, #600]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fad0 	bl	8000c84 <HAL_GetTick>
 80016e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff facc 	bl	8000c84 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e2d7      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06a      	beq.n	80017e8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001712:	4b88      	ldr	r3, [pc, #544]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800171a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800171c:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d007      	beq.n	8001738 <HAL_RCC_OscConfig+0x2e0>
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b18      	cmp	r3, #24
 800172c:	d11b      	bne.n	8001766 <HAL_RCC_OscConfig+0x30e>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d116      	bne.n	8001766 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001738:	4b7e      	ldr	r3, [pc, #504]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x2f8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b80      	cmp	r3, #128	@ 0x80
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e2ac      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001750:	4b78      	ldr	r3, [pc, #480]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	4975      	ldr	r1, [pc, #468]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001760:	4313      	orrs	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001764:	e040      	b.n	80017e8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d023      	beq.n	80017b6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800176e:	4b71      	ldr	r3, [pc, #452]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a70      	ldr	r2, [pc, #448]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fa83 	bl	8000c84 <HAL_GetTick>
 800177e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001782:	f7ff fa7f 	bl	8000c84 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e28a      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001794:	4b67      	ldr	r3, [pc, #412]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017a0:	4b64      	ldr	r3, [pc, #400]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4961      	ldr	r1, [pc, #388]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e018      	b.n	80017e8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80017bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa5f 	bl	8000c84 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017ca:	f7ff fa5b 	bl	8000c84 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e266      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017dc:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d036      	beq.n	8001862 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001800:	4a4c      	ldr	r2, [pc, #304]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fa3c 	bl	8000c84 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff fa38 	bl	8000c84 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e243      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001822:	4b44      	ldr	r3, [pc, #272]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x3b8>
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001830:	4b40      	ldr	r3, [pc, #256]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001834:	4a3f      	ldr	r2, [pc, #252]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fa22 	bl	8000c84 <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fa1e 	bl	8000c84 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e229      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d036      	beq.n	80018dc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d019      	beq.n	80018aa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001876:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2e      	ldr	r2, [pc, #184]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 800187c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001880:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001882:	f7ff f9ff 	bl	8000c84 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188a:	f7ff f9fb 	bl	8000c84 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e206      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x432>
 80018a8:	e018      	b.n	80018dc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a21      	ldr	r2, [pc, #132]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80018b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018b6:	f7ff f9e5 	bl	8000c84 <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018be:	f7ff f9e1 	bl	8000c84 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1ec      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80af 	beq.w	8001a48 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_RCC_OscConfig+0x4e0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <HAL_RCC_OscConfig+0x4e0>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018f6:	f7ff f9c5 	bl	8000c84 <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7ff f9c1 	bl	8000c84 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	@ 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1cc      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_RCC_OscConfig+0x4e0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x4e4>
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001928:	4a02      	ldr	r2, [pc, #8]	@ (8001934 <HAL_RCC_OscConfig+0x4dc>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001930:	e05b      	b.n	80019ea <HAL_RCC_OscConfig+0x592>
 8001932:	bf00      	nop
 8001934:	58024400 	.word	0x58024400
 8001938:	58024800 	.word	0x58024800
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d112      	bne.n	800196a <HAL_RCC_OscConfig+0x512>
 8001944:	4b9d      	ldr	r3, [pc, #628]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	4a9c      	ldr	r2, [pc, #624]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001950:	4b9a      	ldr	r3, [pc, #616]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001954:	4a99      	ldr	r2, [pc, #612]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800195a:	6713      	str	r3, [r2, #112]	@ 0x70
 800195c:	4b97      	ldr	r3, [pc, #604]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a96      	ldr	r2, [pc, #600]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
 8001968:	e03f      	b.n	80019ea <HAL_RCC_OscConfig+0x592>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d112      	bne.n	8001998 <HAL_RCC_OscConfig+0x540>
 8001972:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001976:	4a91      	ldr	r2, [pc, #580]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	@ 0x70
 800197e:	4b8f      	ldr	r3, [pc, #572]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	4a8e      	ldr	r2, [pc, #568]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001988:	6713      	str	r3, [r2, #112]	@ 0x70
 800198a:	4b8c      	ldr	r3, [pc, #560]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	4a8b      	ldr	r2, [pc, #556]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	@ 0x70
 8001996:	e028      	b.n	80019ea <HAL_RCC_OscConfig+0x592>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b85      	cmp	r3, #133	@ 0x85
 800199e:	d112      	bne.n	80019c6 <HAL_RCC_OscConfig+0x56e>
 80019a0:	4b86      	ldr	r3, [pc, #536]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a4:	4a85      	ldr	r2, [pc, #532]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ac:	4b83      	ldr	r3, [pc, #524]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b0:	4a82      	ldr	r2, [pc, #520]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b8:	4b80      	ldr	r3, [pc, #512]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019bc:	4a7f      	ldr	r2, [pc, #508]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c4:	e011      	b.n	80019ea <HAL_RCC_OscConfig+0x592>
 80019c6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ca:	4a7c      	ldr	r2, [pc, #496]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d6:	4a79      	ldr	r2, [pc, #484]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019de:	4b77      	ldr	r3, [pc, #476]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e2:	4a76      	ldr	r2, [pc, #472]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 80019e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff f947 	bl	8000c84 <HAL_GetTick>
 80019f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff f943 	bl	8000c84 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e14c      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a10:	4b6a      	ldr	r3, [pc, #424]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ee      	beq.n	80019fa <HAL_RCC_OscConfig+0x5a2>
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f931 	bl	8000c84 <HAL_GetTick>
 8001a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f92d 	bl	8000c84 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e136      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 812b 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a52:	4b5a      	ldr	r3, [pc, #360]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a5a:	2b18      	cmp	r3, #24
 8001a5c:	f000 80bb 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 8095 	bne.w	8001b94 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a53      	ldr	r2, [pc, #332]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f905 	bl	8000c84 <HAL_GetTick>
 8001a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f901 	bl	8000c84 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e10c      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a90:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa0:	4b47      	ldr	r3, [pc, #284]	@ (8001bc0 <HAL_RCC_OscConfig+0x768>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	4942      	ldr	r1, [pc, #264]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	025b      	lsls	r3, r3, #9
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ae6:	4935      	ldr	r1, [pc, #212]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001aec:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	4a32      	ldr	r2, [pc, #200]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001af8:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afc:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_RCC_OscConfig+0x76c>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b04:	00d2      	lsls	r2, r2, #3
 8001b06:	492d      	ldr	r1, [pc, #180]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	f023 020c 	bic.w	r2, r3, #12
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	4928      	ldr	r1, [pc, #160]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f023 0202 	bic.w	r2, r3, #2
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4924      	ldr	r1, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a15      	ldr	r2, [pc, #84]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f88a 	bl	8000c84 <HAL_GetTick>
 8001b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f886 	bl	8000c84 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e091      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x71c>
 8001b92:	e089      	b.n	8001ca8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a08      	ldr	r2, [pc, #32]	@ (8001bbc <HAL_RCC_OscConfig+0x764>)
 8001b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f870 	bl	8000c84 <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ba6:	e00f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f86c 	bl	8000c84 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d908      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e077      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	fffffc0c 	.word	0xfffffc0c
 8001bc4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e9      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x750>
 8001bd4:	e068      	b.n	8001ca8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001bd6:	4b37      	ldr	r3, [pc, #220]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bdc:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d031      	beq.n	8001c4e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d12a      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d122      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d11a      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	0a5b      	lsrs	r3, r3, #9
 8001c1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d111      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d108      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e02b      	b.n	8001caa <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c56:	08db      	lsrs	r3, r3, #3
 8001c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c5c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d01f      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c74:	f7ff f806 	bl	8000c84 <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff f802 	bl	8000c84 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d0f9      	beq.n	8001c7c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RCC_OscConfig+0x860>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	4907      	ldr	r1, [pc, #28]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <HAL_RCC_OscConfig+0x85c>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3730      	adds	r7, #48	@ 0x30
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	ffff0007 	.word	0xffff0007

08001cbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e19c      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b87      	ldr	r3, [pc, #540]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
 8001ce6:	4985      	ldr	r1, [pc, #532]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b83      	ldr	r3, [pc, #524]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e184      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	4b7b      	ldr	r3, [pc, #492]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d908      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d1c:	4b78      	ldr	r3, [pc, #480]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4975      	ldr	r1, [pc, #468]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d010      	beq.n	8001d5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b70      	ldr	r3, [pc, #448]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d908      	bls.n	8001d5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	496a      	ldr	r1, [pc, #424]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	4b64      	ldr	r3, [pc, #400]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d908      	bls.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d78:	4b61      	ldr	r3, [pc, #388]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	495e      	ldr	r1, [pc, #376]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001da6:	4b56      	ldr	r3, [pc, #344]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4953      	ldr	r1, [pc, #332]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d908      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f023 020f 	bic.w	r2, r3, #15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4947      	ldr	r1, [pc, #284]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d055      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001df2:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4940      	ldr	r1, [pc, #256]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d121      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0f6      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e24:	4b36      	ldr	r3, [pc, #216]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d115      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0ea      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e3c:	4b30      	ldr	r3, [pc, #192]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0de      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0d6      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5c:	4b28      	ldr	r3, [pc, #160]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f023 0207 	bic.w	r2, r3, #7
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4925      	ldr	r1, [pc, #148]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6e:	f7fe ff09 	bl	8000c84 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e76:	f7fe ff05 	bl	8000c84 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0be      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d1eb      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d208      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f023 020f 	bic.w	r2, r3, #15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d214      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 020f 	bic.w	r2, r3, #15
 8001ee2:	4906      	ldr	r1, [pc, #24]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <HAL_RCC_ClockConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e086      	b.n	800200a <HAL_RCC_ClockConfig+0x34e>
 8001efc:	52002000 	.word	0x52002000
 8001f00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d208      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f20:	4b3c      	ldr	r3, [pc, #240]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4939      	ldr	r1, [pc, #228]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d208      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f4e:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	492e      	ldr	r1, [pc, #184]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d208      	bcs.n	8001f8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4922      	ldr	r1, [pc, #136]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d208      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4917      	ldr	r1, [pc, #92]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fbc:	f000 f834 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	4912      	ldr	r1, [pc, #72]	@ (8002018 <HAL_RCC_ClockConfig+0x35c>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_RCC_ClockConfig+0x358>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <HAL_RCC_ClockConfig+0x35c>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <HAL_RCC_ClockConfig+0x360>)
 8001ff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_RCC_ClockConfig+0x364>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_RCC_ClockConfig+0x368>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fdf6 	bl	8000bf0 <HAL_InitTick>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	58024400 	.word	0x58024400
 8002018:	08002a80 	.word	0x08002a80
 800201c:	24000004 	.word	0x24000004
 8002020:	24000000 	.word	0x24000000
 8002024:	24000008 	.word	0x24000008

08002028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202e:	4bb3      	ldr	r3, [pc, #716]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002036:	2b18      	cmp	r3, #24
 8002038:	f200 8155 	bhi.w	80022e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800203c:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <HAL_RCC_GetSysClockFreq+0x1c>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	080020a9 	.word	0x080020a9
 8002048:	080022e7 	.word	0x080022e7
 800204c:	080022e7 	.word	0x080022e7
 8002050:	080022e7 	.word	0x080022e7
 8002054:	080022e7 	.word	0x080022e7
 8002058:	080022e7 	.word	0x080022e7
 800205c:	080022e7 	.word	0x080022e7
 8002060:	080022e7 	.word	0x080022e7
 8002064:	080020cf 	.word	0x080020cf
 8002068:	080022e7 	.word	0x080022e7
 800206c:	080022e7 	.word	0x080022e7
 8002070:	080022e7 	.word	0x080022e7
 8002074:	080022e7 	.word	0x080022e7
 8002078:	080022e7 	.word	0x080022e7
 800207c:	080022e7 	.word	0x080022e7
 8002080:	080022e7 	.word	0x080022e7
 8002084:	080020d5 	.word	0x080020d5
 8002088:	080022e7 	.word	0x080022e7
 800208c:	080022e7 	.word	0x080022e7
 8002090:	080022e7 	.word	0x080022e7
 8002094:	080022e7 	.word	0x080022e7
 8002098:	080022e7 	.word	0x080022e7
 800209c:	080022e7 	.word	0x080022e7
 80020a0:	080022e7 	.word	0x080022e7
 80020a4:	080020db 	.word	0x080020db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020a8:	4b94      	ldr	r3, [pc, #592]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020b4:	4b91      	ldr	r3, [pc, #580]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	4a90      	ldr	r2, [pc, #576]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020c6:	e111      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020ca:	61bb      	str	r3, [r7, #24]
      break;
 80020cc:	e10e      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80020ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020d0:	61bb      	str	r3, [r7, #24]
      break;
 80020d2:	e10b      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020d6:	61bb      	str	r3, [r7, #24]
      break;
 80020d8:	e108      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020da:	4b88      	ldr	r3, [pc, #544]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020e4:	4b85      	ldr	r3, [pc, #532]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020f0:	4b82      	ldr	r3, [pc, #520]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020fa:	4b80      	ldr	r3, [pc, #512]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80e1 	beq.w	80022e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b02      	cmp	r3, #2
 8002122:	f000 8083 	beq.w	800222c <HAL_RCC_GetSysClockFreq+0x204>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b02      	cmp	r3, #2
 800212a:	f200 80a1 	bhi.w	8002270 <HAL_RCC_GetSysClockFreq+0x248>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x114>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d056      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800213a:	e099      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800213c:	4b6f      	ldr	r3, [pc, #444]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d02d      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002148:	4b6c      	ldr	r3, [pc, #432]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	4a6b      	ldr	r2, [pc, #428]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002172:	4b62      	ldr	r3, [pc, #392]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002182:	ed97 6a02 	vldr	s12, [r7, #8]
 8002186:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800230c <HAL_RCC_GetSysClockFreq+0x2e4>
 800218a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021a2:	e087      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002310 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b6:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800230c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e6:	e065      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002314 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021fa:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220a:	ed97 6a02 	vldr	s12, [r7, #8]
 800220e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800230c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800221a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800221e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800222a:	e043      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002318 <HAL_RCC_GetSysClockFreq+0x2f0>
 800223a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223e:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002252:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800230c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800226e:	e021      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002314 <HAL_RCC_GetSysClockFreq+0x2ec>
 800227e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002292:	ed97 6a02 	vldr	s12, [r7, #8]
 8002296:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800230c <HAL_RCC_GetSysClockFreq+0x2e4>
 800229a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	0a5b      	lsrs	r3, r3, #9
 80022ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022be:	3301      	adds	r3, #1
 80022c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80022d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d8:	ee17 3a90 	vmov	r3, s15
 80022dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
      break;
 80022e4:	e002      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022e8:	61bb      	str	r3, [r7, #24]
      break;
 80022ea:	bf00      	nop
  }

  return sysclockfreq;
 80022ec:	69bb      	ldr	r3, [r7, #24]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
 8002300:	03d09000 	.word	0x03d09000
 8002304:	003d0900 	.word	0x003d0900
 8002308:	007a1200 	.word	0x007a1200
 800230c:	46000000 	.word	0x46000000
 8002310:	4c742400 	.word	0x4c742400
 8002314:	4a742400 	.word	0x4a742400
 8002318:	4af42400 	.word	0x4af42400

0800231c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e049      	b.n	80023c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fab0 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f000 fa0c 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e054      	b.n	800248e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a26      	ldr	r2, [pc, #152]	@ (800249c <HAL_TIM_Base_Start_IT+0xd0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d022      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240e:	d01d      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	@ (80024a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d018      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	@ (80024a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d013      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00e      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_TIM_Base_Start_IT+0xe0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d115      	bne.n	8002478 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_TIM_Base_Start_IT+0xec>)
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d015      	beq.n	800248a <HAL_TIM_Base_Start_IT+0xbe>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d011      	beq.n	800248a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	e008      	b.n	800248a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e000      	b.n	800248c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40010000 	.word	0x40010000
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	40010400 	.word	0x40010400
 80024b0:	40001800 	.word	0x40001800
 80024b4:	40014000 	.word	0x40014000
 80024b8:	00010007 	.word	0x00010007

080024bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10f      	bne.n	8002504 <HAL_TIM_Base_Stop_IT+0x48>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_Base_Stop_IT+0x48>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01b      	beq.n	800257e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f06f 0202 	mvn.w	r2, #2
 800254e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8e9 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 800256a:	e005      	b.n	8002578 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8db 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8ec 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01b      	beq.n	80025ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f06f 0204 	mvn.w	r2, #4
 800259a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f8c3 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 80025b6:	e005      	b.n	80025c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8b5 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8c6 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01b      	beq.n	8002616 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0208 	mvn.w	r2, #8
 80025e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2204      	movs	r2, #4
 80025ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f89d 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8002602:	e005      	b.n	8002610 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f88f 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8a0 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01b      	beq.n	8002662 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f06f 0210 	mvn.w	r2, #16
 8002632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2208      	movs	r2, #8
 8002638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f877 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 800264e:	e005      	b.n	800265c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f869 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f87a 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0201 	mvn.w	r2, #1
 800267e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe f879 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f99a 	bl	80029e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f992 	bl	80029fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f834 	bl	8002764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0220 	mvn.w	r2, #32
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f95a 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a43      	ldr	r2, [pc, #268]	@ (8002898 <TIM_Base_SetConfig+0x120>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a40      	ldr	r2, [pc, #256]	@ (800289c <TIM_Base_SetConfig+0x124>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3f      	ldr	r2, [pc, #252]	@ (80028a0 <TIM_Base_SetConfig+0x128>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3e      	ldr	r2, [pc, #248]	@ (80028a4 <TIM_Base_SetConfig+0x12c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	@ (80028a8 <TIM_Base_SetConfig+0x130>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a32      	ldr	r2, [pc, #200]	@ (8002898 <TIM_Base_SetConfig+0x120>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d8:	d01b      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2f      	ldr	r2, [pc, #188]	@ (800289c <TIM_Base_SetConfig+0x124>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d017      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2e      	ldr	r2, [pc, #184]	@ (80028a0 <TIM_Base_SetConfig+0x128>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2d      	ldr	r2, [pc, #180]	@ (80028a4 <TIM_Base_SetConfig+0x12c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <TIM_Base_SetConfig+0x130>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a2b      	ldr	r2, [pc, #172]	@ (80028ac <TIM_Base_SetConfig+0x134>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <TIM_Base_SetConfig+0x138>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <TIM_Base_SetConfig+0x13c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <TIM_Base_SetConfig+0x120>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00f      	beq.n	800286a <TIM_Base_SetConfig+0xf2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <TIM_Base_SetConfig+0x130>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0xf2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a15      	ldr	r2, [pc, #84]	@ (80028ac <TIM_Base_SetConfig+0x134>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0xf2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <TIM_Base_SetConfig+0x138>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0xf2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <TIM_Base_SetConfig+0x13c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d103      	bne.n	8002872 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40014400 	.word	0x40014400
 80028b4:	40014800 	.word	0x40014800

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e06d      	b.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a30      	ldr	r2, [pc, #192]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2f      	ldr	r2, [pc, #188]	@ (80029bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800290a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a20      	ldr	r2, [pc, #128]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002942:	d01d      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1d      	ldr	r2, [pc, #116]	@ (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1c      	ldr	r2, [pc, #112]	@ (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1a      	ldr	r2, [pc, #104]	@ (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a15      	ldr	r2, [pc, #84]	@ (80029bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a15      	ldr	r2, [pc, #84]	@ (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10c      	bne.n	800299a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40010400 	.word	0x40010400
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800
 80029c8:	40000c00 	.word	0x40000c00
 80029cc:	40001800 	.word	0x40001800
 80029d0:	40014000 	.word	0x40014000

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <memset>:
 8002a10:	4402      	add	r2, r0
 8002a12:	4603      	mov	r3, r0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d100      	bne.n	8002a1a <memset+0xa>
 8002a18:	4770      	bx	lr
 8002a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1e:	e7f9      	b.n	8002a14 <memset+0x4>

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4d0d      	ldr	r5, [pc, #52]	@ (8002a58 <__libc_init_array+0x38>)
 8002a24:	4c0d      	ldr	r4, [pc, #52]	@ (8002a5c <__libc_init_array+0x3c>)
 8002a26:	1b64      	subs	r4, r4, r5
 8002a28:	10a4      	asrs	r4, r4, #2
 8002a2a:	2600      	movs	r6, #0
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	4d0b      	ldr	r5, [pc, #44]	@ (8002a60 <__libc_init_array+0x40>)
 8002a32:	4c0c      	ldr	r4, [pc, #48]	@ (8002a64 <__libc_init_array+0x44>)
 8002a34:	f000 f818 	bl	8002a68 <_init>
 8002a38:	1b64      	subs	r4, r4, r5
 8002a3a:	10a4      	asrs	r4, r4, #2
 8002a3c:	2600      	movs	r6, #0
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	08002a90 	.word	0x08002a90
 8002a5c:	08002a90 	.word	0x08002a90
 8002a60:	08002a90 	.word	0x08002a90
 8002a64:	08002a94 	.word	0x08002a94

08002a68 <_init>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr

08002a74 <_fini>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr
