
led_button_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec0  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800216c  0800216c  0000316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800217c  0800217c  0000317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002180  08002180  00003180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002184  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  24000010  08002194  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400003c  08002194  0000403c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000703f  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000012fa  00000000  00000000  0000b07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000668  00000000  00000000  0000c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000004b6  00000000  00000000  0000c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001758  00000000  00000000  0000ce96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000754a  00000000  00000000  0000e5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012b57b  00000000  00000000  00015b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001410b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000186c  00000000  00000000  001410f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  00142964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08002154 	.word	0x08002154

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08002154 	.word	0x08002154

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002f0:	f000 f9da 	bl	80006a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fb30 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f804 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f878 	bl	80003f0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <main+0x14>

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09c      	sub	sp, #112	@ 0x70
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800030e:	224c      	movs	r2, #76	@ 0x4c
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fef2 	bl	80020fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2220      	movs	r2, #32
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 feec 	bl	80020fc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xE003FFFF;
 8000324:	4b2f      	ldr	r3, [pc, #188]	@ (80003e4 <SystemClock_Config+0xe0>)
 8000326:	4a30      	ldr	r2, [pc, #192]	@ (80003e8 <SystemClock_Config+0xe4>)
 8000328:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800032c:	2004      	movs	r0, #4
 800032e:	f000 ff29 	bl	8001184 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000332:	2300      	movs	r3, #0
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	4b2d      	ldr	r3, [pc, #180]	@ (80003ec <SystemClock_Config+0xe8>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a2c      	ldr	r2, [pc, #176]	@ (80003ec <SystemClock_Config+0xe8>)
 800033c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b2a      	ldr	r3, [pc, #168]	@ (80003ec <SystemClock_Config+0xe8>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800034e:	bf00      	nop
 8000350:	4b26      	ldr	r3, [pc, #152]	@ (80003ec <SystemClock_Config+0xe8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800035c:	d1f8      	bne.n	8000350 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035e:	2302      	movs	r3, #2
 8000360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000362:	2301      	movs	r3, #1
 8000364:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000366:	2340      	movs	r3, #64	@ 0x40
 8000368:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800036e:	2300      	movs	r3, #0
 8000370:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000372:	2304      	movs	r3, #4
 8000374:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000376:	2323      	movs	r3, #35	@ 0x23
 8000378:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800037a:	2302      	movs	r3, #2
 800037c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800037e:	2304      	movs	r3, #4
 8000380:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000382:	2302      	movs	r3, #2
 8000384:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000386:	230c      	movs	r3, #12
 8000388:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800038a:	2300      	movs	r3, #0
 800038c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000396:	4618      	mov	r0, r3
 8000398:	f000 ff4e 	bl	8001238 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003a2:	f000 f9ad 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	233f      	movs	r3, #63	@ 0x3f
 80003a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2303      	movs	r3, #3
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003b6:	2340      	movs	r3, #64	@ 0x40
 80003b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003ba:	2340      	movs	r3, #64	@ 0x40
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003c4:	2340      	movs	r3, #64	@ 0x40
 80003c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2106      	movs	r1, #6
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fb65 	bl	8001a9c <HAL_RCC_ClockConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80003d8:	f000 f992 	bl	8000700 <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3770      	adds	r7, #112	@ 0x70
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	58024400 	.word	0x58024400
 80003e8:	e003ffff 	.word	0xe003ffff
 80003ec:	58024800 	.word	0x58024800

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	@ 0x28
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b3f      	ldr	r3, [pc, #252]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000408:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800040c:	4a3d      	ldr	r2, [pc, #244]	@ (8000504 <MX_GPIO_Init+0x114>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000416:	4b3b      	ldr	r3, [pc, #236]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000418:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000424:	4b37      	ldr	r3, [pc, #220]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000426:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800042a:	4a36      	ldr	r2, [pc, #216]	@ (8000504 <MX_GPIO_Init+0x114>)
 800042c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000430:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000434:	4b33      	ldr	r3, [pc, #204]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000436:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800043a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b30      	ldr	r3, [pc, #192]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000444:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000448:	4a2e      	ldr	r2, [pc, #184]	@ (8000504 <MX_GPIO_Init+0x114>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000452:	4b2c      	ldr	r3, [pc, #176]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000454:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000458:	f003 0302 	and.w	r3, r3, #2
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000460:	4b28      	ldr	r3, [pc, #160]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000462:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000466:	4a27      	ldr	r2, [pc, #156]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000468:	f043 0310 	orr.w	r3, r3, #16
 800046c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000470:	4b24      	ldr	r3, [pc, #144]	@ (8000504 <MX_GPIO_Init+0x114>)
 8000472:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000476:	f003 0310 	and.w	r3, r3, #16
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000484:	4820      	ldr	r0, [pc, #128]	@ (8000508 <MX_GPIO_Init+0x118>)
 8000486:	f000 fe49 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	481f      	ldr	r0, [pc, #124]	@ (800050c <MX_GPIO_Init+0x11c>)
 8000490:	f000 fe44 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800049a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4619      	mov	r1, r3
 80004aa:	4819      	ldr	r0, [pc, #100]	@ (8000510 <MX_GPIO_Init+0x120>)
 80004ac:	f000 fc6e 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80004b0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	480f      	ldr	r0, [pc, #60]	@ (8000508 <MX_GPIO_Init+0x118>)
 80004ca:	f000 fc5f 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004ce:	2302      	movs	r3, #2
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	4809      	ldr	r0, [pc, #36]	@ (800050c <MX_GPIO_Init+0x11c>)
 80004e6:	f000 fc51 	bl	8000d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2028      	movs	r0, #40	@ 0x28
 80004f0:	f000 fb9f 	bl	8000c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004f4:	2028      	movs	r0, #40	@ 0x28
 80004f6:	f000 fbb6 	bl	8000c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	bf00      	nop
 80004fc:	3728      	adds	r7, #40	@ 0x28
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	58024400 	.word	0x58024400
 8000508:	58020400 	.word	0x58020400
 800050c:	58021000 	.word	0x58021000
 8000510:	58020800 	.word	0x58020800

08000514 <SetLedState>:

/* USER CODE BEGIN 4 */
void SetLedState(uint8_t state)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    switch(state)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d84f      	bhi.n	80005c4 <SetLedState+0xb0>
 8000524:	a201      	add	r2, pc, #4	@ (adr r2, 800052c <SetLedState+0x18>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	0800053d 	.word	0x0800053d
 8000530:	0800055f 	.word	0x0800055f
 8000534:	08000581 	.word	0x08000581
 8000538:	080005a3 	.word	0x080005a3
    {
        case 0: // All off
            LED1_L(); LED2_L(); LED3_L();
 800053c:	2200      	movs	r2, #0
 800053e:	2180      	movs	r1, #128	@ 0x80
 8000540:	4822      	ldr	r0, [pc, #136]	@ (80005cc <SetLedState+0xb8>)
 8000542:	f000 fdeb 	bl	800111c <HAL_GPIO_WritePin>
 8000546:	2200      	movs	r2, #0
 8000548:	2102      	movs	r1, #2
 800054a:	4821      	ldr	r0, [pc, #132]	@ (80005d0 <SetLedState+0xbc>)
 800054c:	f000 fde6 	bl	800111c <HAL_GPIO_WritePin>
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000556:	481d      	ldr	r0, [pc, #116]	@ (80005cc <SetLedState+0xb8>)
 8000558:	f000 fde0 	bl	800111c <HAL_GPIO_WritePin>
            break;
 800055c:	e032      	b.n	80005c4 <SetLedState+0xb0>
        case 1: // LED1 on
            LED1_H(); LED2_L(); LED3_L();
 800055e:	2201      	movs	r2, #1
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	481a      	ldr	r0, [pc, #104]	@ (80005cc <SetLedState+0xb8>)
 8000564:	f000 fdda 	bl	800111c <HAL_GPIO_WritePin>
 8000568:	2200      	movs	r2, #0
 800056a:	2102      	movs	r1, #2
 800056c:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <SetLedState+0xbc>)
 800056e:	f000 fdd5 	bl	800111c <HAL_GPIO_WritePin>
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000578:	4814      	ldr	r0, [pc, #80]	@ (80005cc <SetLedState+0xb8>)
 800057a:	f000 fdcf 	bl	800111c <HAL_GPIO_WritePin>
            break;
 800057e:	e021      	b.n	80005c4 <SetLedState+0xb0>
        case 2: // LED2 on
            LED1_L(); LED2_H(); LED3_L();
 8000580:	2200      	movs	r2, #0
 8000582:	2180      	movs	r1, #128	@ 0x80
 8000584:	4811      	ldr	r0, [pc, #68]	@ (80005cc <SetLedState+0xb8>)
 8000586:	f000 fdc9 	bl	800111c <HAL_GPIO_WritePin>
 800058a:	2201      	movs	r2, #1
 800058c:	2102      	movs	r1, #2
 800058e:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <SetLedState+0xbc>)
 8000590:	f000 fdc4 	bl	800111c <HAL_GPIO_WritePin>
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <SetLedState+0xb8>)
 800059c:	f000 fdbe 	bl	800111c <HAL_GPIO_WritePin>
            break;
 80005a0:	e010      	b.n	80005c4 <SetLedState+0xb0>
        case 3: // LED3 on
            LED1_L(); LED2_L(); LED3_H();
 80005a2:	2200      	movs	r2, #0
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	4809      	ldr	r0, [pc, #36]	@ (80005cc <SetLedState+0xb8>)
 80005a8:	f000 fdb8 	bl	800111c <HAL_GPIO_WritePin>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2102      	movs	r1, #2
 80005b0:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <SetLedState+0xbc>)
 80005b2:	f000 fdb3 	bl	800111c <HAL_GPIO_WritePin>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <SetLedState+0xb8>)
 80005be:	f000 fdad 	bl	800111c <HAL_GPIO_WritePin>
            break;
 80005c2:	bf00      	nop
    }
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	58020400 	.word	0x58020400
 80005d0:	58021000 	.word	0x58021000

080005d4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B1_BUTTON_PIN)
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005e4:	d152      	bne.n	800068c <HAL_GPIO_EXTI_Callback+0xb8>
    {
        uint32_t now = HAL_GetTick();
 80005e6:	f000 fa3d 	bl	8000a64 <HAL_GetTick>
 80005ea:	60f8      	str	r0, [r7, #12]

        // Debounce: ignore presses shorter than 50ms
        if ((now - last_press_tick) < 50) return;
 80005ec:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <HAL_GPIO_EXTI_Callback+0xc0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	2b31      	cmp	r3, #49	@ 0x31
 80005f6:	d948      	bls.n	800068a <HAL_GPIO_EXTI_Callback+0xb6>
        last_press_tick = now;
 80005f8:	4a26      	ldr	r2, [pc, #152]	@ (8000694 <HAL_GPIO_EXTI_Callback+0xc0>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6013      	str	r3, [r2, #0]

        // If the button is pressed down
        if (HAL_GPIO_ReadPin(B1_BUTTON_GPIO_PORT, B1_BUTTON_PIN) == GPIO_PIN_SET)
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	4825      	ldr	r0, [pc, #148]	@ (8000698 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000604:	f000 fd72 	bl	80010ec <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d103      	bne.n	8000616 <HAL_GPIO_EXTI_Callback+0x42>
        {
            press_start_tick = now;   // Save the time when the press started
 800060e:	4a23      	ldr	r2, [pc, #140]	@ (800069c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	e03a      	b.n	800068c <HAL_GPIO_EXTI_Callback+0xb8>
        }
        else // Button is released
        {
            uint32_t press_duration = now - press_start_tick;
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	60bb      	str	r3, [r7, #8]

            if (press_duration >= 3000) // Long hold > 3 seconds
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000626:	4293      	cmp	r3, r2
 8000628:	d90b      	bls.n	8000642 <HAL_GPIO_EXTI_Callback+0x6e>
            {
                led_state = 0; // Turn off all LEDs
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
                SetLedState(led_state);
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff6d 	bl	8000514 <SetLedState>
                click_count = 0;
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e024      	b.n	800068c <HAL_GPIO_EXTI_Callback+0xb8>
            }
            else
            {
                // Handle single / double click
                click_count++;
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800064c:	701a      	strb	r2, [r3, #0]

                if (click_count == 1)
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d01a      	beq.n	800068c <HAL_GPIO_EXTI_Callback+0xb8>
                {
                    // Start a short timer to decide between
                    // single click and double click
                    // (can use a HAL timer or check in the main loop)
                }
                else if (click_count == 2)
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d116      	bne.n	800068c <HAL_GPIO_EXTI_Callback+0xb8>
                {
                    // Double click → switch to next LED
                    led_state++;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000668:	701a      	strb	r2, [r3, #0]
                    if (led_state > 3) led_state = 1;
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d902      	bls.n	8000678 <HAL_GPIO_EXTI_Callback+0xa4>
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
                    SetLedState(led_state);
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff49 	bl	8000514 <SetLedState>
                    click_count = 0;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e000      	b.n	800068c <HAL_GPIO_EXTI_Callback+0xb8>
        if ((now - last_press_tick) < 50) return;
 800068a:	bf00      	nop
                }
            }
        }
    }
}
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2400002c 	.word	0x2400002c
 8000698:	58020800 	.word	0x58020800
 800069c:	24000030 	.word	0x24000030
 80006a0:	24000035 	.word	0x24000035
 80006a4:	24000034 	.word	0x24000034

080006a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ba:	f000 faef 	bl	8000c9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006be:	2301      	movs	r3, #1
 80006c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006ca:	231f      	movs	r3, #31
 80006cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006ce:	2387      	movs	r3, #135	@ 0x87
 80006d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006d6:	2300      	movs	r3, #0
 80006d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006da:	2301      	movs	r3, #1
 80006dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006de:	2301      	movs	r3, #1
 80006e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006ea:	463b      	mov	r3, r7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fb0d 	bl	8000d0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 faea 	bl	8000ccc <HAL_MPU_Enable>

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <Error_Handler+0x8>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_MspInit+0x30>)
 8000714:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_MspInit+0x30>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_MspInit+0x30>)
 8000724:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	58024400 	.word	0x58024400

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <MemManage_Handler+0x4>

08000758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <UsageFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000796:	f000 f951 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007a2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007a6:	f000 fcd2 	bl	800114e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b4:	4b3e      	ldr	r3, [pc, #248]	@ (80008b0 <SystemInit+0x100>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ba:	4a3d      	ldr	r2, [pc, #244]	@ (80008b0 <SystemInit+0x100>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007c4:	4b3b      	ldr	r3, [pc, #236]	@ (80008b4 <SystemInit+0x104>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d807      	bhi.n	80007e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007d0:	4b38      	ldr	r3, [pc, #224]	@ (80008b4 <SystemInit+0x104>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f023 030f 	bic.w	r3, r3, #15
 80007d8:	4a36      	ldr	r2, [pc, #216]	@ (80008b4 <SystemInit+0x104>)
 80007da:	f043 0303 	orr.w	r3, r3, #3
 80007de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007e0:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <SystemInit+0x108>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a34      	ldr	r2, [pc, #208]	@ (80008b8 <SystemInit+0x108>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ec:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <SystemInit+0x108>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <SystemInit+0x108>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4930      	ldr	r1, [pc, #192]	@ (80008b8 <SystemInit+0x108>)
 80007f8:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <SystemInit+0x10c>)
 80007fa:	4013      	ands	r3, r2
 80007fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <SystemInit+0x104>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 030c 	and.w	r3, r3, #12
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <SystemInit+0x104>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f023 030f 	bic.w	r3, r3, #15
 8000812:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <SystemInit+0x104>)
 8000814:	f043 0303 	orr.w	r3, r3, #3
 8000818:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <SystemInit+0x108>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000820:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <SystemInit+0x108>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <SystemInit+0x108>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800082c:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <SystemInit+0x108>)
 800082e:	4a24      	ldr	r2, [pc, #144]	@ (80008c0 <SystemInit+0x110>)
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000832:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <SystemInit+0x108>)
 8000834:	4a23      	ldr	r2, [pc, #140]	@ (80008c4 <SystemInit+0x114>)
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <SystemInit+0x108>)
 800083a:	4a23      	ldr	r2, [pc, #140]	@ (80008c8 <SystemInit+0x118>)
 800083c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <SystemInit+0x108>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <SystemInit+0x108>)
 8000846:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <SystemInit+0x118>)
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <SystemInit+0x108>)
 800084c:	2200      	movs	r2, #0
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <SystemInit+0x108>)
 8000852:	4a1d      	ldr	r2, [pc, #116]	@ (80008c8 <SystemInit+0x118>)
 8000854:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <SystemInit+0x108>)
 8000858:	2200      	movs	r2, #0
 800085a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <SystemInit+0x108>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a15      	ldr	r2, [pc, #84]	@ (80008b8 <SystemInit+0x108>)
 8000862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000866:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <SystemInit+0x108>)
 800086a:	2200      	movs	r2, #0
 800086c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <SystemInit+0x108>)
 8000870:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d113      	bne.n	80008a4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <SystemInit+0x108>)
 800087e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000882:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <SystemInit+0x108>)
 8000884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000888:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <SystemInit+0x11c>)
 800088e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000892:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <SystemInit+0x108>)
 8000896:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800089a:	4a07      	ldr	r2, [pc, #28]	@ (80008b8 <SystemInit+0x108>)
 800089c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00
 80008b4:	52002000 	.word	0x52002000
 80008b8:	58024400 	.word	0x58024400
 80008bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80008c0:	02020200 	.word	0x02020200
 80008c4:	01ff0000 	.word	0x01ff0000
 80008c8:	01010280 	.word	0x01010280
 80008cc:	52004000 	.word	0x52004000

080008d0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <ExitRun0Mode+0x2c>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <ExitRun0Mode+0x2c>)
 80008da:	f023 0302 	bic.w	r3, r3, #2
 80008de:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008e0:	bf00      	nop
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <ExitRun0Mode+0x2c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	58024800 	.word	0x58024800

08000900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000900:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800093c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000904:	f7ff ffe4 	bl	80008d0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff ff52 	bl	80007b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	@ (8000940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	@ (8000944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	@ (8000950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000932:	f001 fbeb 	bl	800210c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fcd9 	bl	80002ec <main>
  bx  lr
 800093a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800093c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000940:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000944:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000948:	08002184 	.word	0x08002184
  ldr r2, =_sbss
 800094c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000950:	2400003c 	.word	0x2400003c

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f95c 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000964:	f001 fa50 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8000968:	4602      	mov	r2, r0
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_Init+0x68>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	4913      	ldr	r1, [pc, #76]	@ (80009c4 <HAL_Init+0x6c>)
 8000976:	5ccb      	ldrb	r3, [r1, r3]
 8000978:	f003 031f 	and.w	r3, r3, #31
 800097c:	fa22 f303 	lsr.w	r3, r2, r3
 8000980:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <HAL_Init+0x68>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <HAL_Init+0x6c>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	f003 031f 	and.w	r3, r3, #31
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	fa22 f303 	lsr.w	r3, r2, r3
 8000998:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <HAL_Init+0x70>)
 800099a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800099c:	4a0b      	ldr	r2, [pc, #44]	@ (80009cc <HAL_Init+0x74>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f814 	bl	80009d0 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e002      	b.n	80009b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009b2:	f7ff feab 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58024400 	.word	0x58024400
 80009c4:	0800216c 	.word	0x0800216c
 80009c8:	24000004 	.word	0x24000004
 80009cc:	24000000 	.word	0x24000000

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e021      	b.n	8000a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <HAL_InitTick+0x64>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <HAL_InitTick+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f941 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 f90b 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <HAL_InitTick+0x68>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2400000c 	.word	0x2400000c
 8000a34:	24000000 	.word	0x24000000
 8000a38:	24000008 	.word	0x24000008

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2400000c 	.word	0x2400000c
 8000a60:	24000038 	.word	0x24000038

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	24000038 	.word	0x24000038

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	05fa0000 	.word	0x05fa0000

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	@ (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	@ (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	@ (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	@ 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff40 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff90 	bl	8000b70 <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5f 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff33 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffa4 	bl	8000bd8 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ca0:	f3bf 8f5f 	dmb	sy
}
 8000ca4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <HAL_MPU_Disable+0x28>)
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000caa:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <HAL_MPU_Disable+0x28>)
 8000cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cb0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_MPU_Disable+0x2c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	e000ed90 	.word	0xe000ed90

08000ccc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <HAL_MPU_Enable+0x38>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MPU_Enable+0x3c>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce2:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_MPU_Enable+0x3c>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000cea:	f3bf 8f4f 	dsb	sy
}
 8000cee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cf0:	f3bf 8f6f 	isb	sy
}
 8000cf4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed90 	.word	0xe000ed90
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	785a      	ldrb	r2, [r3, #1]
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_MPU_ConfigRegion+0x7c>)
 8000d1a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_MPU_ConfigRegion+0x7c>)
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <HAL_MPU_ConfigRegion+0x7c>)
 8000d22:	f023 0301 	bic.w	r3, r3, #1
 8000d26:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d28:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_MPU_ConfigRegion+0x7c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7b1b      	ldrb	r3, [r3, #12]
 8000d34:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7adb      	ldrb	r3, [r3, #11]
 8000d3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7a9b      	ldrb	r3, [r3, #10]
 8000d42:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7b5b      	ldrb	r3, [r3, #13]
 8000d4a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7b9b      	ldrb	r3, [r3, #14]
 8000d52:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7bdb      	ldrb	r3, [r3, #15]
 8000d5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a5b      	ldrb	r3, [r3, #9]
 8000d62:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7a1b      	ldrb	r3, [r3, #8]
 8000d6a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d6c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d76:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d78:	6113      	str	r3, [r2, #16]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed90 	.word	0xe000ed90

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d9a:	4b89      	ldr	r3, [pc, #548]	@ (8000fc0 <HAL_GPIO_Init+0x234>)
 8000d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d9e:	e194      	b.n	80010ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 8186 	beq.w	80010c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d005      	beq.n	8000dd0 <HAL_GPIO_Init+0x44>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d130      	bne.n	8000e32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e06:	2201      	movs	r2, #1
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	f003 0201 	and.w	r2, r3, #1
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d017      	beq.n	8000e6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d123      	bne.n	8000ec2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	69b9      	ldr	r1, [r7, #24]
 8000ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0203 	and.w	r2, r3, #3
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 80e0 	beq.w	80010c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f04:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <HAL_GPIO_Init+0x238>)
 8000f06:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc4 <HAL_GPIO_Init+0x238>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <HAL_GPIO_Init+0x238>)
 8000f16:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a29      	ldr	r2, [pc, #164]	@ (8000fc8 <HAL_GPIO_Init+0x23c>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <HAL_GPIO_Init+0x240>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d052      	beq.n	8000ff4 <HAL_GPIO_Init+0x268>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <HAL_GPIO_Init+0x244>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d031      	beq.n	8000fba <HAL_GPIO_Init+0x22e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_GPIO_Init+0x248>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x22a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <HAL_GPIO_Init+0x24c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x226>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1c      	ldr	r2, [pc, #112]	@ (8000fdc <HAL_GPIO_Init+0x250>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x222>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <HAL_GPIO_Init+0x254>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x21e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe4 <HAL_GPIO_Init+0x258>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x21a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_GPIO_Init+0x25c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x216>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_GPIO_Init+0x260>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <HAL_GPIO_Init+0x264>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x20e>
 8000f96:	2309      	movs	r3, #9
 8000f98:	e02d      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	e02b      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e029      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e027      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e025      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e023      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e021      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e01f      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e01d      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e01b      	b.n	8000ff6 <HAL_GPIO_Init+0x26a>
 8000fbe:	bf00      	nop
 8000fc0:	58000080 	.word	0x58000080
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58000400 	.word	0x58000400
 8000fcc:	58020000 	.word	0x58020000
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58020c00 	.word	0x58020c00
 8000fdc:	58021000 	.word	0x58021000
 8000fe0:	58021400 	.word	0x58021400
 8000fe4:	58021800 	.word	0x58021800
 8000fe8:	58021c00 	.word	0x58021c00
 8000fec:	58022000 	.word	0x58022000
 8000ff0:	58022400 	.word	0x58022400
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001006:	4938      	ldr	r1, [pc, #224]	@ (80010e8 <HAL_GPIO_Init+0x35c>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800103a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f47f ae63 	bne.w	8000da0 <HAL_GPIO_Init+0x14>
  }
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3724      	adds	r7, #36	@ 0x24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	58000400 	.word	0x58000400

080010ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e001      	b.n	800110e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fa2d 	bl	80005d4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <HAL_PWREx_ConfigSupply+0xb0>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	2b06      	cmp	r3, #6
 8001196:	d00a      	beq.n	80011ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_PWREx_ConfigSupply+0xb0>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e040      	b.n	800122c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e03e      	b.n	800122c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_PWREx_ConfigSupply+0xb0>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80011b6:	491f      	ldr	r1, [pc, #124]	@ (8001234 <HAL_PWREx_ConfigSupply+0xb0>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011be:	f7ff fc51 	bl	8000a64 <HAL_GetTick>
 80011c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011c4:	e009      	b.n	80011da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011c6:	f7ff fc4d 	bl	8000a64 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d4:	d901      	bls.n	80011da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e028      	b.n	800122c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_PWREx_ConfigSupply+0xb0>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e6:	d1ee      	bne.n	80011c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b1e      	cmp	r3, #30
 80011ec:	d008      	beq.n	8001200 <HAL_PWREx_ConfigSupply+0x7c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80011f2:	d005      	beq.n	8001200 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b1d      	cmp	r3, #29
 80011f8:	d002      	beq.n	8001200 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80011fe:	d114      	bne.n	800122a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001200:	f7ff fc30 	bl	8000a64 <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001206:	e009      	b.n	800121c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001208:	f7ff fc2c 	bl	8000a64 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001216:	d901      	bls.n	800121c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e007      	b.n	800122c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_PWREx_ConfigSupply+0xb0>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001228:	d1ee      	bne.n	8001208 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	58024800 	.word	0x58024800

08001238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f000 bc1f 	b.w	8001a8a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80b3 	beq.w	80013c0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b95      	ldr	r3, [pc, #596]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001264:	4b92      	ldr	r3, [pc, #584]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800126a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126c:	2b10      	cmp	r3, #16
 800126e:	d007      	beq.n	8001280 <HAL_RCC_OscConfig+0x48>
 8001270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001272:	2b18      	cmp	r3, #24
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x64>
 8001276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d10d      	bne.n	800129c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b8b      	ldr	r3, [pc, #556]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <HAL_RCC_OscConfig+0x186>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 8093 	bne.w	80013be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e3f6      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x7c>
 80012a6:	4b82      	ldr	r3, [pc, #520]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a81      	ldr	r2, [pc, #516]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e058      	b.n	8001366 <HAL_RCC_OscConfig+0x12e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0xaa>
 80012bc:	4b7c      	ldr	r3, [pc, #496]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a7b      	ldr	r2, [pc, #492]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b79      	ldr	r3, [pc, #484]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a78      	ldr	r2, [pc, #480]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b76      	ldr	r3, [pc, #472]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a75      	ldr	r2, [pc, #468]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e041      	b.n	8001366 <HAL_RCC_OscConfig+0x12e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012ea:	d112      	bne.n	8001312 <HAL_RCC_OscConfig+0xda>
 80012ec:	4b70      	ldr	r3, [pc, #448]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a6f      	ldr	r2, [pc, #444]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b6d      	ldr	r3, [pc, #436]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a6c      	ldr	r2, [pc, #432]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80012fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b6a      	ldr	r3, [pc, #424]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a69      	ldr	r2, [pc, #420]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e029      	b.n	8001366 <HAL_RCC_OscConfig+0x12e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800131a:	d112      	bne.n	8001342 <HAL_RCC_OscConfig+0x10a>
 800131c:	4b64      	ldr	r3, [pc, #400]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a63      	ldr	r2, [pc, #396]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001322:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b61      	ldr	r3, [pc, #388]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a60      	ldr	r2, [pc, #384]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800132e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b5e      	ldr	r3, [pc, #376]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a5d      	ldr	r2, [pc, #372]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800133a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e011      	b.n	8001366 <HAL_RCC_OscConfig+0x12e>
 8001342:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5a      	ldr	r2, [pc, #360]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b58      	ldr	r3, [pc, #352]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a57      	ldr	r2, [pc, #348]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b55      	ldr	r3, [pc, #340]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a54      	ldr	r2, [pc, #336]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001360:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001364:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d013      	beq.n	8001396 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fb79 	bl	8000a64 <HAL_GetTick>
 8001372:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fb75 	bl	8000a64 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	@ 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e380      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001388:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x13e>
 8001394:	e014      	b.n	80013c0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fb65 	bl	8000a64 <HAL_GetTick>
 800139a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139e:	f7ff fb61 	bl	8000a64 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b64      	cmp	r3, #100	@ 0x64
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e36c      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b0:	4b3f      	ldr	r3, [pc, #252]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x166>
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 808c 	beq.w	80014e6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ce:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1bc>
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	2b18      	cmp	r3, #24
 80013e8:	d137      	bne.n	800145a <HAL_RCC_OscConfig+0x222>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d132      	bne.n	800145a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f4:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_OscConfig+0x1d4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e33e      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 0219 	bic.w	r2, r3, #25
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4925      	ldr	r1, [pc, #148]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fb21 	bl	8000a64 <HAL_GetTick>
 8001422:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fb1d 	bl	8000a64 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e328      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4917      	ldr	r1, [pc, #92]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001458:	e045      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d028      	beq.n	80014b4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0219 	bic.w	r2, r3, #25
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4910      	ldr	r1, [pc, #64]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff faf6 	bl	8000a64 <HAL_GetTick>
 8001478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff faf2 	bl	8000a64 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e2fd      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	4901      	ldr	r1, [pc, #4]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
 80014ae:	e01a      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ae>
 80014b0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b4:	4b97      	ldr	r3, [pc, #604]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a96      	ldr	r2, [pc, #600]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fad0 	bl	8000a64 <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff facc 	bl	8000a64 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2d7      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014da:	4b8e      	ldr	r3, [pc, #568]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d06a      	beq.n	80015c8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f2:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014fc:	4b85      	ldr	r3, [pc, #532]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80014fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001500:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x2e0>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b18      	cmp	r3, #24
 800150c:	d11b      	bne.n	8001546 <HAL_RCC_OscConfig+0x30e>
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001518:	4b7e      	ldr	r3, [pc, #504]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x2f8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b80      	cmp	r3, #128	@ 0x80
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e2ac      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001530:	4b78      	ldr	r3, [pc, #480]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4975      	ldr	r1, [pc, #468]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001544:	e040      	b.n	80015c8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d023      	beq.n	8001596 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800154e:	4b71      	ldr	r3, [pc, #452]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a70      	ldr	r2, [pc, #448]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fa83 	bl	8000a64 <HAL_GetTick>
 800155e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001562:	f7ff fa7f 	bl	8000a64 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e28a      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001574:	4b67      	ldr	r3, [pc, #412]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001580:	4b64      	ldr	r3, [pc, #400]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	4961      	ldr	r1, [pc, #388]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001596:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5e      	ldr	r2, [pc, #376]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 800159c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fa5f 	bl	8000a64 <HAL_GetTick>
 80015a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015aa:	f7ff fa5b 	bl	8000a64 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e266      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015bc:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d036      	beq.n	8001642 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d019      	beq.n	8001610 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa3c 	bl	8000a64 <HAL_GetTick>
 80015ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fa38 	bl	8000a64 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e243      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001602:	4b44      	ldr	r3, [pc, #272]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3b8>
 800160e:	e018      	b.n	8001642 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001610:	4b40      	ldr	r3, [pc, #256]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001614:	4a3f      	ldr	r2, [pc, #252]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fa22 	bl	8000a64 <HAL_GetTick>
 8001620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fa1e 	bl	8000a64 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e229      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001636:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	2b00      	cmp	r3, #0
 800164c:	d036      	beq.n	80016bc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d019      	beq.n	800168a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001656:	4b2f      	ldr	r3, [pc, #188]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2e      	ldr	r2, [pc, #184]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 800165c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001660:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001662:	f7ff f9ff 	bl	8000a64 <HAL_GetTick>
 8001666:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800166a:	f7ff f9fb 	bl	8000a64 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e206      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x432>
 8001688:	e018      	b.n	80016bc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001694:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001696:	f7ff f9e5 	bl	8000a64 <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800169e:	f7ff f9e1 	bl	8000a64 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1ec      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80af 	beq.w	8001828 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <HAL_RCC_OscConfig+0x4e0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <HAL_RCC_OscConfig+0x4e0>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016d6:	f7ff f9c5 	bl	8000a64 <HAL_GetTick>
 80016da:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff f9c1 	bl	8000a64 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	@ 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1cc      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_RCC_OscConfig+0x4e0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10b      	bne.n	800171c <HAL_RCC_OscConfig+0x4e4>
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a02      	ldr	r2, [pc, #8]	@ (8001714 <HAL_RCC_OscConfig+0x4dc>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	e05b      	b.n	80017ca <HAL_RCC_OscConfig+0x592>
 8001712:	bf00      	nop
 8001714:	58024400 	.word	0x58024400
 8001718:	58024800 	.word	0x58024800
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x512>
 8001724:	4b9d      	ldr	r3, [pc, #628]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001728:	4a9c      	ldr	r2, [pc, #624]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001730:	4b9a      	ldr	r3, [pc, #616]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a99      	ldr	r2, [pc, #612]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800173a:	6713      	str	r3, [r2, #112]	@ 0x70
 800173c:	4b97      	ldr	r3, [pc, #604]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	4a96      	ldr	r2, [pc, #600]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6713      	str	r3, [r2, #112]	@ 0x70
 8001748:	e03f      	b.n	80017ca <HAL_RCC_OscConfig+0x592>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d112      	bne.n	8001778 <HAL_RCC_OscConfig+0x540>
 8001752:	4b92      	ldr	r3, [pc, #584]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001756:	4a91      	ldr	r2, [pc, #580]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6713      	str	r3, [r2, #112]	@ 0x70
 800175e:	4b8f      	ldr	r3, [pc, #572]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	4a8e      	ldr	r2, [pc, #568]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001768:	6713      	str	r3, [r2, #112]	@ 0x70
 800176a:	4b8c      	ldr	r3, [pc, #560]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a8b      	ldr	r2, [pc, #556]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	e028      	b.n	80017ca <HAL_RCC_OscConfig+0x592>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b85      	cmp	r3, #133	@ 0x85
 800177e:	d112      	bne.n	80017a6 <HAL_RCC_OscConfig+0x56e>
 8001780:	4b86      	ldr	r3, [pc, #536]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001784:	4a85      	ldr	r2, [pc, #532]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6713      	str	r3, [r2, #112]	@ 0x70
 800178c:	4b83      	ldr	r3, [pc, #524]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a82      	ldr	r2, [pc, #520]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
 8001798:	4b80      	ldr	r3, [pc, #512]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179c:	4a7f      	ldr	r2, [pc, #508]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a4:	e011      	b.n	80017ca <HAL_RCC_OscConfig+0x592>
 80017a6:	4b7d      	ldr	r3, [pc, #500]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a7c      	ldr	r2, [pc, #496]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	4b7a      	ldr	r3, [pc, #488]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	4a79      	ldr	r2, [pc, #484]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017be:	4b77      	ldr	r3, [pc, #476]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	4a76      	ldr	r2, [pc, #472]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff f947 	bl	8000a64 <HAL_GetTick>
 80017d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f943 	bl	8000a64 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e14c      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f0:	4b6a      	ldr	r3, [pc, #424]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ee      	beq.n	80017da <HAL_RCC_OscConfig+0x5a2>
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff f931 	bl	8000a64 <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff f92d 	bl	8000a64 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e136      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181c:	4b5f      	ldr	r3, [pc, #380]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 812b 	beq.w	8001a88 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001832:	4b5a      	ldr	r3, [pc, #360]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800183a:	2b18      	cmp	r3, #24
 800183c:	f000 80bb 	beq.w	80019b6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	2b02      	cmp	r3, #2
 8001846:	f040 8095 	bne.w	8001974 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b54      	ldr	r3, [pc, #336]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a53      	ldr	r2, [pc, #332]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f905 	bl	8000a64 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f901 	bl	8000a64 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e10c      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001870:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800187e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001880:	4b47      	ldr	r3, [pc, #284]	@ (80019a0 <HAL_RCC_OscConfig+0x768>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	430a      	orrs	r2, r1
 8001890:	4942      	ldr	r1, [pc, #264]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001892:	4313      	orrs	r3, r2
 8001894:	628b      	str	r3, [r1, #40]	@ 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	3b01      	subs	r3, #1
 800189c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a4:	3b01      	subs	r3, #1
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b0:	3b01      	subs	r3, #1
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018be:	3b01      	subs	r3, #1
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80018c6:	4935      	ldr	r1, [pc, #212]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	4a32      	ldr	r2, [pc, #200]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018d8:	4b30      	ldr	r3, [pc, #192]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <HAL_RCC_OscConfig+0x76c>)
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018e4:	00d2      	lsls	r2, r2, #3
 80018e6:	492d      	ldr	r1, [pc, #180]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	f023 020c 	bic.w	r2, r3, #12
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	4928      	ldr	r1, [pc, #160]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018fe:	4b27      	ldr	r3, [pc, #156]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	f023 0202 	bic.w	r2, r3, #2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	4924      	ldr	r1, [pc, #144]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800190c:	4313      	orrs	r3, r2
 800190e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001910:	4b22      	ldr	r3, [pc, #136]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	4a21      	ldr	r2, [pc, #132]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800191c:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001928:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192c:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800192e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001934:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a15      	ldr	r2, [pc, #84]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f88a 	bl	8000a64 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f886 	bl	8000a64 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e091      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x71c>
 8001972:	e089      	b.n	8001a88 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_RCC_OscConfig+0x764>)
 800197a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f870 	bl	8000a64 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001986:	e00f      	b.n	80019a8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f86c 	bl	8000a64 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d908      	bls.n	80019a8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e077      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
 800199a:	bf00      	nop
 800199c:	58024400 	.word	0x58024400
 80019a0:	fffffc0c 	.word	0xfffffc0c
 80019a4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e9      	bne.n	8001988 <HAL_RCC_OscConfig+0x750>
 80019b4:	e068      	b.n	8001a88 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019b6:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 80019b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019bc:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d031      	beq.n	8001a2e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d12a      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d122      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d11a      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	0a5b      	lsrs	r3, r3, #9
 80019fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d111      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d108      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	0e1b      	lsrs	r3, r3, #24
 8001a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e02b      	b.n	8001a8a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a3c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d01f      	beq.n	8001a88 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a54:	f7ff f806 	bl	8000a64 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff f802 	bl	8000a64 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d0f9      	beq.n	8001a5c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_RCC_OscConfig+0x860>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a74:	00d2      	lsls	r2, r2, #3
 8001a76:	4907      	ldr	r1, [pc, #28]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_RCC_OscConfig+0x85c>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	58024400 	.word	0x58024400
 8001a98:	ffff0007 	.word	0xffff0007

08001a9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e19c      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b87      	ldr	r3, [pc, #540]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 020f 	bic.w	r2, r3, #15
 8001ac6:	4985      	ldr	r1, [pc, #532]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b83      	ldr	r3, [pc, #524]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e184      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d908      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001afc:	4b78      	ldr	r3, [pc, #480]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4975      	ldr	r1, [pc, #468]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b70      	ldr	r3, [pc, #448]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d908      	bls.n	8001b3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	496a      	ldr	r1, [pc, #424]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d010      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d908      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b58:	4b61      	ldr	r3, [pc, #388]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	495e      	ldr	r1, [pc, #376]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	4b59      	ldr	r3, [pc, #356]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d908      	bls.n	8001b98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b86:	4b56      	ldr	r3, [pc, #344]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4953      	ldr	r1, [pc, #332]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d908      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f023 020f 	bic.w	r2, r3, #15
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4947      	ldr	r1, [pc, #284]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d055      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4940      	ldr	r1, [pc, #256]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bec:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d121      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0f6      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c04:	4b36      	ldr	r3, [pc, #216]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d115      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0ea      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0de      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0d6      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4925      	ldr	r1, [pc, #148]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4e:	f7fe ff09 	bl	8000a64 <HAL_GetTick>
 8001c52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7fe ff05 	bl	8000a64 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0be      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d1eb      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d208      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f023 020f 	bic.w	r2, r3, #15
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	490e      	ldr	r1, [pc, #56]	@ (8001ce0 <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d214      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 020f 	bic.w	r2, r3, #15
 8001cc2:	4906      	ldr	r1, [pc, #24]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <HAL_RCC_ClockConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e086      	b.n	8001dea <HAL_RCC_ClockConfig+0x34e>
 8001cdc:	52002000 	.word	0x52002000
 8001ce0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d208      	bcs.n	8001d12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d00:	4b3c      	ldr	r3, [pc, #240]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4939      	ldr	r1, [pc, #228]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d010      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	4b34      	ldr	r3, [pc, #208]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d208      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	492e      	ldr	r1, [pc, #184]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d208      	bcs.n	8001d6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4922      	ldr	r1, [pc, #136]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d010      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d208      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4917      	ldr	r1, [pc, #92]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d9c:	f000 f834 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	4912      	ldr	r1, [pc, #72]	@ (8001df8 <HAL_RCC_ClockConfig+0x35c>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_RCC_ClockConfig+0x358>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <HAL_RCC_ClockConfig+0x35c>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_RCC_ClockConfig+0x360>)
 8001dd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_RCC_ClockConfig+0x364>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x368>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fdf6 	bl	80009d0 <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	58024400 	.word	0x58024400
 8001df8:	0800216c 	.word	0x0800216c
 8001dfc:	24000004 	.word	0x24000004
 8001e00:	24000000 	.word	0x24000000
 8001e04:	24000008 	.word	0x24000008

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e0e:	4bb3      	ldr	r3, [pc, #716]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e16:	2b18      	cmp	r3, #24
 8001e18:	f200 8155 	bhi.w	80020c6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e89 	.word	0x08001e89
 8001e28:	080020c7 	.word	0x080020c7
 8001e2c:	080020c7 	.word	0x080020c7
 8001e30:	080020c7 	.word	0x080020c7
 8001e34:	080020c7 	.word	0x080020c7
 8001e38:	080020c7 	.word	0x080020c7
 8001e3c:	080020c7 	.word	0x080020c7
 8001e40:	080020c7 	.word	0x080020c7
 8001e44:	08001eaf 	.word	0x08001eaf
 8001e48:	080020c7 	.word	0x080020c7
 8001e4c:	080020c7 	.word	0x080020c7
 8001e50:	080020c7 	.word	0x080020c7
 8001e54:	080020c7 	.word	0x080020c7
 8001e58:	080020c7 	.word	0x080020c7
 8001e5c:	080020c7 	.word	0x080020c7
 8001e60:	080020c7 	.word	0x080020c7
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	080020c7 	.word	0x080020c7
 8001e6c:	080020c7 	.word	0x080020c7
 8001e70:	080020c7 	.word	0x080020c7
 8001e74:	080020c7 	.word	0x080020c7
 8001e78:	080020c7 	.word	0x080020c7
 8001e7c:	080020c7 	.word	0x080020c7
 8001e80:	080020c7 	.word	0x080020c7
 8001e84:	08001ebb 	.word	0x08001ebb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e88:	4b94      	ldr	r3, [pc, #592]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e94:	4b91      	ldr	r3, [pc, #580]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	4a90      	ldr	r2, [pc, #576]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ea6:	e111      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eaa:	61bb      	str	r3, [r7, #24]
      break;
 8001eac:	e10e      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001eae:	4b8d      	ldr	r3, [pc, #564]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001eb0:	61bb      	str	r3, [r7, #24]
      break;
 8001eb2:	e10b      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001eb6:	61bb      	str	r3, [r7, #24]
      break;
 8001eb8:	e108      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eba:	4b88      	ldr	r3, [pc, #544]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ec4:	4b85      	ldr	r3, [pc, #532]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ece:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ed0:	4b82      	ldr	r3, [pc, #520]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eda:	4b80      	ldr	r3, [pc, #512]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80e1 	beq.w	80020c0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f000 8083 	beq.w	800200c <HAL_RCC_GetSysClockFreq+0x204>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	f200 80a1 	bhi.w	8002050 <HAL_RCC_GetSysClockFreq+0x248>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x114>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d056      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f1a:	e099      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d02d      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f28:	4b6c      	ldr	r3, [pc, #432]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	4a6b      	ldr	r2, [pc, #428]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f52:	4b62      	ldr	r3, [pc, #392]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f82:	e087      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f96:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001faa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fc6:	e065      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fda:	4b40      	ldr	r3, [pc, #256]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800200a:	e043      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002016:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800201a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800201e:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800202e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002032:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800203a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800203e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800204e:	e021      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800205e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002072:	ed97 6a02 	vldr	s12, [r7, #8]
 8002076:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800207a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800207e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002092:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	0a5b      	lsrs	r3, r3, #9
 800209a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800209e:	3301      	adds	r3, #1
 80020a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80020b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b8:	ee17 3a90 	vmov	r3, s15
 80020bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020be:	e005      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
      break;
 80020c4:	e002      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020c6:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020c8:	61bb      	str	r3, [r7, #24]
      break;
 80020ca:	bf00      	nop
  }

  return sysclockfreq;
 80020cc:	69bb      	ldr	r3, [r7, #24]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	@ 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400
 80020e0:	03d09000 	.word	0x03d09000
 80020e4:	003d0900 	.word	0x003d0900
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	46000000 	.word	0x46000000
 80020f0:	4c742400 	.word	0x4c742400
 80020f4:	4a742400 	.word	0x4a742400
 80020f8:	4af42400 	.word	0x4af42400

080020fc <memset>:
 80020fc:	4402      	add	r2, r0
 80020fe:	4603      	mov	r3, r0
 8002100:	4293      	cmp	r3, r2
 8002102:	d100      	bne.n	8002106 <memset+0xa>
 8002104:	4770      	bx	lr
 8002106:	f803 1b01 	strb.w	r1, [r3], #1
 800210a:	e7f9      	b.n	8002100 <memset+0x4>

0800210c <__libc_init_array>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	4d0d      	ldr	r5, [pc, #52]	@ (8002144 <__libc_init_array+0x38>)
 8002110:	4c0d      	ldr	r4, [pc, #52]	@ (8002148 <__libc_init_array+0x3c>)
 8002112:	1b64      	subs	r4, r4, r5
 8002114:	10a4      	asrs	r4, r4, #2
 8002116:	2600      	movs	r6, #0
 8002118:	42a6      	cmp	r6, r4
 800211a:	d109      	bne.n	8002130 <__libc_init_array+0x24>
 800211c:	4d0b      	ldr	r5, [pc, #44]	@ (800214c <__libc_init_array+0x40>)
 800211e:	4c0c      	ldr	r4, [pc, #48]	@ (8002150 <__libc_init_array+0x44>)
 8002120:	f000 f818 	bl	8002154 <_init>
 8002124:	1b64      	subs	r4, r4, r5
 8002126:	10a4      	asrs	r4, r4, #2
 8002128:	2600      	movs	r6, #0
 800212a:	42a6      	cmp	r6, r4
 800212c:	d105      	bne.n	800213a <__libc_init_array+0x2e>
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	f855 3b04 	ldr.w	r3, [r5], #4
 8002134:	4798      	blx	r3
 8002136:	3601      	adds	r6, #1
 8002138:	e7ee      	b.n	8002118 <__libc_init_array+0xc>
 800213a:	f855 3b04 	ldr.w	r3, [r5], #4
 800213e:	4798      	blx	r3
 8002140:	3601      	adds	r6, #1
 8002142:	e7f2      	b.n	800212a <__libc_init_array+0x1e>
 8002144:	0800217c 	.word	0x0800217c
 8002148:	0800217c 	.word	0x0800217c
 800214c:	0800217c 	.word	0x0800217c
 8002150:	08002180 	.word	0x08002180

08002154 <_init>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr

08002160 <_fini>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr
